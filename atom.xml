<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鸟依家</title>
  <subtitle>前端开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-27T03:39:18.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小鳥依家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BOM</title>
    <link href="http://yoursite.com/2017/04/25/1510-shijain-shijianmaopao/"/>
    <id>http://yoursite.com/2017/04/25/1510-shijain-shijianmaopao/</id>
    <published>2017-04-25T14:16:51.000Z</published>
    <updated>2017-04-27T03:39:18.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h1><p>##概念：</p>
<blockquote>
<p>Window 对象表示浏览器中打开的窗口。如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul>
<li>innerHeight 返回窗口的文档显示区的高度</li>
<li>innerWidth 返回窗口的文档显示区的宽度</li>
<li>outerHeight 返回窗口的外部高度 包括滚动条、地址栏、收藏栏等</li>
<li>outerwidth 返回窗口的外部宽度 </li>
<li>length 设置或返回窗口中的框架数量</li>
<li>name 设置或返回窗口的名称。<ul>
<li>window.open() 打开的新网页，第二个参数就是此网页的name。</li>
<li>iframe里面，name属性就是window的name</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>close() 关闭浏览器窗口</li>
<li>alert() 显示带有一段消息和一个确认按钮的警告框</li>
<li>confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框</li>
<li>prompt()显示可提示用户输入的对话框</li>
<li>open() 打开一个新的浏览器窗口或查找一个已命名的窗口</li>
<li>resizeBy() 按照指定的像素调整窗口的大小</li>
<li>resizeTo() 把窗口的大小调整到指定的宽度和高度</li>
<li>scrollBy() 按照指定的像素值来滚动内容</li>
<li>scrollTo() 把内容滚动到指定的坐标</li>
</ul>
<h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><blockquote>
<p>navigator对象通常用于检测浏览器不操作系统的版本</p>
<p>##属性：</p>
<ul>
<li>appCodeName返回浏览器的代码名</li>
<li>appVersion返回浏览器的次级版本</li>
<li>appName返回浏览器的名称</li>
<li>language返回当前浏览器的语言</li>
<li>platform 返回运行浏览器的操作系统平台</li>
</ul>
</blockquote>
<h1 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h1><blockquote>
<p>document 对象是 Window 对象的一部分，包含整个htmlDOM,可通过 window.document 属性对其进行访问,也可以用document直接访问</p>
</blockquote>
<p>##属性:</p>
<ul>
<li>document.cookie 获取或设置cookie</li>
<li>document.title 获取或设置title</li>
<li>document.URL 获取或设置URL</li>
</ul>
<h2 id="window下的其他对象"><a href="#window下的其他对象" class="headerlink" title="window下的其他对象"></a>window下的其他对象</h2><blockquote>
<p>screen 对象包含有关客户端显示屏幕的信息</p>
</blockquote>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li>height 返回显示屏幕的高度； width返回显示器屏幕的宽度</li>
<li>availHeight 返回显示屏幕的高度 (除 Windows 任务栏之外)</li>
<li>availWidth 返回显示屏幕的宽度 (除 Windows 任务栏之外)</li>
<li>colorDepth 返回目标设备或缓冲器上的调色板的比特深度</li>
<li>pixelDepth 返回显示屏幕的颜色分辨率（比特每像素）</li>
</ul>
<h2 id="Body对象"><a href="#Body对象" class="headerlink" title="Body对象"></a>Body对象</h2><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ul>
<li>clientWidth网页可见区域宽</li>
<li>clientHeight网页可见区域高</li>
<li>scrollWidth网页正文全文宽</li>
<li>scrollHeight网页正文全文高</li>
<li>scrollTop网页被卷去的高</li>
<li>scrollLeft网页被卷去的左</li>
</ul>
<p>##Location 对象</p>
<blockquote>
<p>Location 对象对象包含有关当前 URL 的信息</p>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ul>
<li>hash设置或返回从井号 (#) 开始的 URL（锚）</li>
<li>host设置或返回主机名和当前 URL 的端口号</li>
<li>hostname设置或返回当前 URL 的主机名</li>
<li>href设置或返回完整的 URL</li>
<li>pathname设置或返回当前 URL 的路径部分</li>
<li>port设置或返回当前 URL 的端口号</li>
<li>protocol设置或返回当前 URL 的协议</li>
<li>search设置或返回从问号 (?) 开始的 URL（查询部分）</li>
</ul>
</blockquote>
<p>###方法</p>
<ul>
<li>assign() 加载新的文档</li>
<li>reload() 重新加载当前文档</li>
<li>replace() 用新的文档替换当前文档</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Window-对象&quot;&gt;&lt;a href=&quot;#Window-对象&quot; class=&quot;headerlink&quot; title=&quot;Window 对象&quot;&gt;&lt;/a&gt;Window 对象&lt;/h1&gt;&lt;p&gt;##概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Window 对象表示浏览器中打
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM节点查找，事件</title>
    <link href="http://yoursite.com/2017/04/22/DOMorEVENT/"/>
    <id>http://yoursite.com/2017/04/22/DOMorEVENT/</id>
    <published>2017-04-21T16:33:08.000Z</published>
    <updated>2017-04-27T03:39:53.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM节点查找"><a href="#DOM节点查找" class="headerlink" title="DOM节点查找"></a>DOM节点查找</h1><table>
<thead>
<tr>
<th style="text-align:left">属性名称</th>
<th style="text-align:right">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">children</td>
<td style="text-align:right">子节点，不包含空节点</td>
</tr>
<tr>
<td style="text-align:left">childNodes</td>
<td style="text-align:right">子节点，包含空节点</td>
</tr>
<tr>
<td style="text-align:left">firstChild</td>
<td style="text-align:right">第一个子节点，包含空节点</td>
</tr>
<tr>
<td style="text-align:left">firstElementChild</td>
<td style="text-align:right">第一个子节点，不包含空节点</td>
</tr>
<tr>
<td style="text-align:left">lastChild</td>
<td style="text-align:right">最后一个子节点，包含空节点</td>
</tr>
<tr>
<td style="text-align:left">lastElementChild</td>
<td style="text-align:right">最后一个子节点，不包含空节点</td>
</tr>
<tr>
<td style="text-align:left">nextSibling</td>
<td style="text-align:right">下一个兄弟节点，包含空节点</td>
</tr>
<tr>
<td style="text-align:left">nextElementSibling</td>
<td style="text-align:right">下一个兄弟节点，不包含空节点</td>
</tr>
<tr>
<td style="text-align:left">previousSibling</td>
<td style="text-align:right">前一个兄弟节点，包含空节点</td>
</tr>
<tr>
<td style="text-align:left">previousElementSibling</td>
<td style="text-align:right">前一个兄弟节点，不包含空节点</td>
</tr>
<tr>
<td style="text-align:left">parentNode</td>
<td style="text-align:right">父节点</td>
</tr>
<tr>
<td style="text-align:left">offsetParent</td>
<td style="text-align:right">第一个有定位属性的父节点，如果没有，则返回body</td>
</tr>
</tbody>
</table>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ul>
<li>onload 图片或页面加载完成</li>
<li>焦点事件:onfocus/onblur 获得焦点/失去焦点</li>
<li>onchange 表单内容发送改变</li>
<li>onclick 点击</li>
<li>ondblclick 点击两次 </li>
<li>onkeydown 键盘按下</li>
<li>onkeyup 键盘抬起</li>
<li></li>
<li><p>获取对象 、 兼容处理</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line"><span class="comment">//获取事件对象兼容处理，一般浏览器直接在function参</span></div><div class="line"><span class="comment">//数ev获取,ie浏览器通过window.event获取</span></div><div class="line"><span class="built_in">document</span>.write(ev.keyCode);&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>键盘event对象属性 keyCode</p>
</li>
<li>onmousedown 鼠标按下</li>
<li>onmouseup 鼠标抬起</li>
<li>onmousemove 鼠标移动</li>
<li>onmouseover 移到对象上</li>
<li>onmouseout 鼠标离开</li>
<li>鼠标event对象属性 clientX clientY</li>
<li>onselect 在文本框中的文本被选中时发生,支持<code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code></li>
<li>onsubmit 在表单中的提交按钮被点击时触发</li>
<li>onreset 在表单中的重置按钮被点击时触发</li>
<li>onerror 在文档或图像加载过程中发生错误时被触发</li>
<li>阻止默认事件<code>preventDefault() 或者 return false；</code></li>
</ul>
<h1 id="事件的触发机制"><a href="#事件的触发机制" class="headerlink" title="事件的触发机制"></a>事件的触发机制</h1><p>事件的触发机制</p>
<blockquote>
<p>上一级标签开始往下查找，直到捕获到事件目标(target)。</p>
</blockquote>
<p>事件冒泡阶段：</p>
<blockquote>
<p>事件从事件目标(target)开始，往上冒泡直到页面的最上一级标签。</p>
</blockquote>
<h1 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h1><p>冒泡详解：</p>
<blockquote>
<p>如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播,不是所有的事件都能冒泡。 blur、 focus、 load和unload不能像其它事件一样冒泡。</p>
</blockquote>
<p>阻止冒泡 </p>
<blockquote>
<p>IE中使用cancelBubble=true，Firefox中使用stopPropagation()</p>
</blockquote>
<p>  <img src="/images/20131028160201571.jpg" alt="冒泡事件"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM节点查找&quot;&gt;&lt;a href=&quot;#DOM节点查找&quot; class=&quot;headerlink&quot; title=&quot;DOM节点查找&quot;&gt;&lt;/a&gt;DOM节点查找&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;属性名称
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式2,DOM</title>
    <link href="http://yoursite.com/2017/04/22/zhengzeORdom/"/>
    <id>http://yoursite.com/2017/04/22/zhengzeORdom/</id>
    <published>2017-04-21T16:32:18.000Z</published>
    <updated>2017-04-21T17:18:54.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式-2"><a href="#正则表达式-2" class="headerlink" title="正则表达式    2"></a>正则表达式    2</h1><table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:right">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:right">换行符</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:right">回车符</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:right">制表符</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:right">换页符</td>
</tr>
<tr>
<td style="text-align:left">\cX</td>
<td style="text-align:right">与x对应的控制字符</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:right">垂直制表符</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:right">退格符</td>
</tr>
<tr>
<td style="text-align:left">\0</td>
<td style="text-align:right">空字符””</td>
</tr>
<tr>
<td style="text-align:left">.(点)</td>
<td style="text-align:right">匹配除换行符之外的任一个字符，IE下[^\n],其他[^\n\r]</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:right">匹配数字[0-9]</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:right">匹配非数字字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:right">匹配字母数字和下划线[a-zA-Z0-9_]</td>
</tr>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:right">匹配除字母数字下划线之外的字符 [^azA-Z0-9_]</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:right">匹配一个空白字符 [ \n\r\t\f\x0B]</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:right">匹配一个非空白字符 [^ \n\r\t\f\x0B]</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:right">独立部分（起始、结束、空格）</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:right">非独立部分</td>
</tr>
<tr>
<td style="text-align:left">\1</td>
<td style="text-align:right">第一个匹配子项的重复匹配</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">量词</th>
<th style="text-align:right">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:right">至少出现n次，最多m次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:right">至少出现n次，</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:right">任意次{0，}</td>
</tr>
<tr>
<td style="text-align:left">？</td>
<td style="text-align:right">零次或者一次{0,1}</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:right">一次或任意次{1,}</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:right">正好n次</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例子</span></div><div class="line"><span class="comment">//？ 零次或一次 &#123;0,1&#125;</span></div><div class="line">	<span class="keyword">var</span> reg09 = <span class="regexp">/a?/</span>;</div><div class="line">	<span class="built_in">document</span>.write( reg09.test(<span class="string">"aabbcc"</span>) +<span class="string">"&lt;/br&gt;"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>首尾</p>
<ul>
<li><p><strong>^</strong>匹配起始位置</p>
<blockquote>
<p>例：/^a/－表示须以字母a开始</p>
</blockquote>
</li>
<li><p><strong>$</strong> 匹配结束位置</p>
<blockquote>
<p>例：/t$/－表示须以字母t结尾</p>
</blockquote>
</li>
</ul>
</li>
<li><p>选择分组与引用</p>
<ul>
<li>分组用()</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">常用正则表达式</th>
<th style="text-align:right">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[\u4e00-\u9fa5]</td>
<td style="text-align:right">匹配中文</td>
</tr>
<tr>
<td style="text-align:left">^\s*</td>
<td style="text-align:right">\s*$</td>
<td>行首行尾空格</td>
</tr>
<tr>
<td style="text-align:left">^\w+@[a-z0-9]+(.[a-z]+){1,3}$</td>
<td style="text-align:right">EMAIL</td>
</tr>
<tr>
<td style="text-align:left">[a-zA-z]+://[^\s]*</td>
<td style="text-align:right">网址</td>
</tr>
<tr>
<td style="text-align:left">[1-9][0-9]{4,9}</td>
<td style="text-align:right">QQ号</td>
</tr>
<tr>
<td style="text-align:left">[1-9]\d{5}</td>
<td style="text-align:right">邮政编码</td>
</tr>
<tr>
<td style="text-align:left">[1-9]\d{5}</td>
<td style="text-align:right">邮政编码</td>
</tr>
<tr>
<td style="text-align:left">[1-9]\d{14}</td>
<td style="text-align:right">[1-9]\d{17}</td>
<td>[1-9]\d{16}x</td>
<td>身份证号</td>
</tr>
</tbody>
</table>
<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ul>
<li>分析DOM节点<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM 教程<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>DOM 第一节<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> 、</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>分析父、子和同胞节点：·<code>&lt;html&gt;</code> 节点没有父节点，它是根节点</p>
<p><code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 的父节点是<code>&lt;html&gt;</code> 节点 ；文本节点 “ Hello world!”的父节点是 <code>&lt;p&gt;</code> 节点</p>
</blockquote>
<ul>
<li><p>获取节点</p>
<ul>
<li>由id获取 <code>getElementById</code><ul>
<li>语法：<code>node.getElementById(&quot;id&quot;);</code></li>
<li>例: <code>document.getElementById(&quot;intro&quot;);</code></li>
</ul>
</li>
<li>由class获取 <code>getElementsByClassName</code><ul>
<li>语法：<code>node. getElementsByClassName(&quot;class&quot;);</code></li>
<li>例：<code>document. getElementsByClassName(&quot; class &quot;);</code></li>
</ul>
</li>
<li>由标签名获取 <code>getElementsByTagName</code><ul>
<li>语法：<code>node. getElementsByTagName(“h1 &quot;);</code></li>
</ul>
</li>
</ul>
</li>
<li><p>查看节点类型</p>
<ul>
<li><p>语法：</p>
<blockquote>
<p><code>nodeObject.[nodeType][nodeName ][nodeValue ]</code></p>
</blockquote>
</li>
<li><p>nodeType 返回以数字值返回指定节点的节点类型。如果节点是元素节点，则返回 1。如果节点是属性节点，则返回 2。</p>
</li>
<li>nodeName 返回节点名称（大写的标签名）</li>
<li>nodeValue 文本节点返回文本内容，其他节点返回null</li>
</ul>
</li>
<li><p>DOM属性获取与设置</p>
<ul>
<li>获取方法：<ul>
<li>element[attributename]</li>
<li>element . attributename</li>
<li>getAttribute( attributename )</li>
</ul>
</li>
<li>设置属性：<ul>
<li>setAttribute( attributename, attri</li>
</ul>
</li>
<li>删除属性：<ul>
<li>removeAttribute( attributename)</li>
</ul>
</li>
</ul>
</li>
<li><p>常用属性：</p>
<ul>
<li>className 类名</li>
<li>offsetWidth 宽</li>
<li>offsetHeight 高</li>
<li>offsetLeft,offsetTop获取距离第一个定位父节点左上角的距离</li>
</ul>
</li>
<li><p>操作子节点<br>创建节点 createElement( )<br>子节点的增删改</p>
<ul>
<li>appendChild 在DOM子集最后添加子节点</li>
<li>insertBefore 在指定的已有子节点之前插入新的子节点</li>
<li>removeChild 删除一个节点</li>
<li>replaceChild 替换节点</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式-2&quot;&gt;&lt;a href=&quot;#正则表达式-2&quot; class=&quot;headerlink&quot; title=&quot;正则表达式    2&quot;&gt;&lt;/a&gt;正则表达式    2&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Math对象,Date对象,正则表达式</title>
    <link href="http://yoursite.com/2017/04/21/MathDate/"/>
    <id>http://yoursite.com/2017/04/21/MathDate/</id>
    <published>2017-04-21T01:19:19.000Z</published>
    <updated>2017-04-25T14:25:10.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h1><ol>
<li><p>作用：</p>
<blockquote>
<p> Javascript中，Math 对象是用于执行数学任务的对象(取整、取余。)</p>
</blockquote>
</li>
<li><p>访问语法：MAth.属性名</p>
<blockquote>
<p>注释：Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()，像 Math.sin() 这样的函数只是函数，不是某个对象的方法。您无需创建它，通过把 Math 作为对象使用就可以调用其所有属性和方法。</p>
</blockquote>
</li>
<li><p>属性和方法</p>
<ul>
<li>abs(x)返回数的绝对值</li>
<li>ceil(x)对数进行上取整</li>
<li>floor(x)对数进行下取整</li>
<li>max(x,y)返回 x 和 y 中的最高值</li>
<li>min(x,y)返回 x 和 y 中的最低值</li>
<li>round(x)把数四舍五入为最接近的整数</li>
<li>pow(x,y)返回 x 的 y 次幂</li>
<li>random()返回 0 ~ 1 之间的随机数</li>
<li>sqrt(x)返回数的平方根</li>
</ul>
</li>
</ol>
<h1 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h1><ol>
<li><p>作用 :</p>
<blockquote>
<p>Javascript中， Date 对象用于处理日期和时间</p>
</blockquote>
</li>
<li><p>创建 Date 对象的语法：</p>
<blockquote>
<p><code>var myDate=new Date()</code></p>
</blockquote>
</li>
<li><p>属性</p>
<ul>
<li>constructor返回对创建此对象的 Date 函数的引用</li>
<li>prototype使您有能力向对象添加属性和方法。</li>
</ul>
</li>
<li><p>获取时间方法 ：</p>
<ul>
<li>Date()返回当日的日期和时间</li>
<li>getDate()从 Date 对象返回一个月中的某一天 (1 ~ 31)</li>
<li>getDay()从 Date 对象返回一周中的某一天 (0 ~ 6)</li>
<li>getMonth()从 Date 对象返回月份 (0 ~ 11)</li>
<li>getFullYear()从 Date 对象以四位数字返回年份</li>
<li>getHours()返回 Date 对象的小时 (0 ~ 23)</li>
<li>getMinutes()返回 Date 对象的分钟 (0 ~ 59)</li>
<li>getSeconds()返回 Date 对象的秒数 (0 ~ 59)</li>
<li>getMilliseconds()返回 Date 对象的毫秒(0 ~ 999)</li>
<li>getTime()返回 1970 年 1 月 1 日至今的毫秒数<br><br><br><br><br><strong>获取时间的其他方法</strong><br><br><br><br></li>
<li>getTimezoneOffset()返回本地时间不格林威治标准时间(GMT) 的分钟差</li>
<li>getUTCDate()根据世界时从Date 对象返回月中的一天 (1~31)</li>
<li>getUTCDay()根据世界时从 Date 对象返回周中的一天 (0 ~ 6)</li>
<li>getUTCMonth()根据世界时从 Date 对象返回月份 (0 ~ 11)</li>
<li>getUTCFullYear()根据世界时从 Date 对象返回四位数的年份</li>
<li>getUTCHours()根据世界时返回 Date 对象的小时 (0 ~ 23)</li>
<li>getUTCMinutes()根据世界时返回 Date 对象的分钟 (0 ~ 59)</li>
<li>getUTCSeconds()根据世界时返回 Date 对象的秒钟 (0 ~ 59)</li>
<li>getUTCMilliseconds()根据世界时返回 Date 对象的毫秒(0~ 999)</li>
<li>parse()返回1970年1月1日午夜到指定日期（字符串）的毫秒数</li>
</ul>
</li>
<li><p>设置时间方法：</p>
<ul>
<li>setHours()设置 Date 对象中的小时 (0 ~ 23)</li>
<li>setMinutes()设置 Date 对象中的分钟 (0 ~ 59)</li>
<li>setSeconds()设置 Date 对象中的秒钟 (0 ~ 59)</li>
<li>setMilliseconds()设置 Date 对象中的毫秒 (0 ~ 999)</li>
<li>setTime()以毫秒设置 Date 对象<br><br><br><br><br><strong>设置时间的其他方法</strong><br><br><br><br></li>
<li>setUTCDate()根据世界时设置 Date 对象中月份的一天 (1 ~ 31)</li>
<li>setUTCMonth()根据世界时设置 Date 对象中的月份 (0 ~ 11)</li>
<li>setUTCFullYear()根据世界时设置 Date 对象中的年份（四位数字）</li>
<li>setUTCHours()根据世界时设置 Date 对象中的小时 (0 ~ 23)</li>
<li>setUTCMinutes()根据世界时设置 Date 对象中的分钟 (0 ~ 59)</li>
<li>setUTCSeconds()根据世界时设置 Date 对象中的秒钟 (0 ~ 59)</li>
<li>setUTCMilliseconds()根据世界时设置 Date 对象中的毫秒 (0 ~ 999)</li>
</ul>
</li>
<li><p>Date的其他方法:</p>
<ul>
<li>toSource()返回该对象的源代码</li>
<li>toString()把 Date 对象转换为字符串 </li>
<li>toTimeString()把 Date 对象的时间部分转换为字符串</li>
<li>toDateString()把 Date 对象的日期部分转换为字符串</li>
<li>toUTCString()根据世界时，把 Date 对象转换为字符串。 </li>
<li>toLocaleString()根据本地时间格式，把 Date 对象转换为字符串。</li>
<li>toLocaleTimeString()根据本地时间格式，把 Date 对象的时间部分转换为字符串 </li>
<li>toLocaleDateString()根据本地时间格式，把 Date 对象的日期部分转换为字符串。</li>
<li>UTC()根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</li>
<li>valueOf()返回 Date 对象的原始值</li>
</ul>
</li>
</ol>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ol>
<li><p>概念: </p>
<blockquote>
<p>正则表达式 （Regular Expression、 regex），是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</p>
</blockquote>
</li>
<li><p>作用:</p>
<blockquote>
<p>测试字符串 、 替换文本 、 从字符串中匹配提取一个子字符串</p>
</blockquote>
</li>
<li><p>声明方式:</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例<span class="number">1</span>：<span class="keyword">var</span> myRegExp=<span class="regexp">/内容 /</span></div><div class="line">例<span class="number">2</span>：<span class="keyword">var</span> myRegExp= <span class="keyword">new</span> <span class="built_in">RegExp</span>(“ 内容” )</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>**注意:**
&gt; `斜杠（/内容/）表示正则表达式的开始和结束；`
`声明方式第一种更简短有效，通常我们都用第一种；`
</code></pre><ol>
<li>正则表达式方法: <ul>
<li>test(),匹配一个字符串是否符合正则规则，成功，则返回true</li>
<li>match(),找到一个戒多个正则表达式的匹配</li>
<li>replace(),替换与正则表达式匹配的子串</li>
<li>search(),检索与正则表达式相匹配的值</li>
<li>split(),把字符串分割为字符串数组</li>
</ul>
</li>
</ol>
<p>5 正则表达式修饰符</p>
<ul>
<li><p>全局匹配,修饰符g /…./g</p>
<ul>
<li><p>例如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str04 = <span class="string">"aacbmaa"</span>;</div><div class="line"><span class="keyword">var</span> reg04 = <span class="regexp">/a/g</span>;</div><div class="line"><span class="built_in">document</span>.write( str04.replace(reg04, <span class="string">"m"</span>) )</div><div class="line"><span class="comment">//输出：mmcbmmm;</span></div><div class="line"><span class="comment">//如果去掉g: var reg04 = /a/;</span></div><div class="line"><span class="comment">//输出：macbmaa;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>不区分大小写,修饰符i /…../I</p>
<blockquote>
<p>就是将Paul和paul视为相同的字符模式</p>
</blockquote>
</li>
<li><p>直接量字符</p>
</li>
<li>任意字符 ： [abc]</li>
<li>范围 ： [a-z]、 [0-9]</li>
<li>排除 ： [^a]</li>
<li>组合 ： [a-z0-9A-Z]    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Math-对象&quot;&gt;&lt;a href=&quot;#Math-对象&quot; class=&quot;headerlink&quot; title=&quot;Math 对象&quot;&gt;&lt;/a&gt;Math 对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Javascript中，Math
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML 5+CSS3从入门到精通</title>
    <link href="http://yoursite.com/2017/04/19/html-css-pdf/"/>
    <id>http://yoursite.com/2017/04/19/html-css-pdf/</id>
    <published>2017-04-19T07:31:31.000Z</published>
    <updated>2017-04-19T08:11:35.646Z</updated>
    
    <content type="html"><![CDATA[

	<div class="row">
    <embed src="/PDF/HTML" width="100%" height="550" type="application/pdf">
	</div>



<p>HTML5+CSS3从入门到精通是通过基础知识+中小实例+综合案例的方式，讲述了用HTML5+ CSS3设计构建网站的必备知识，相对于专业指南、高级程序设计、开发指南同类图书，本书是一本适合快速入手的自学教程。内容有：创建HTML5文档，实战HTML5表单，实战HTML5绘画，HTML5音频与视频，Web存储，离线应用，Workers多线程处理，Geolocation地理位置等技术。CSS3部分主要介绍了CSS3概述，CSS选择器，文本、字体与颜色，背景和边框，2D变形，设计动画，网页布局、用户界面以及CSS3的其他新特性。<br>《HTML5+CSS3从入门到精通》内容涵盖了HTML5+CSS3的所有重要特性，通过大量实际案例对HTML5+CSS3的重要特性进行了详细讲解，内容全面丰富，易于理解，能够帮助读者提升实际应用技能。</p>
<p>《HTML5+CSS3从入门到精通》内容翔实、结构清晰、循序渐进，基础知识与案例实战紧密结合，既可作为HTML5+CSS3初学者的入门教材，也适合作为中高级用户对新技术作进一步学习的参考用书。本书显著特色有：<br>　　1．同步视频讲解，让学习更为直观高效。227节大型高清同步视频讲解，先看视频再学习效率更高。<br>　　2．海量精彩实例，用实例学更轻松快捷。225个精彩实例，模仿练习是最快捷的学习方式。<br>　　3．精选实战案例，为高薪就业牵线搭桥。31个实战案例展示可为以后就业积累经验。<br>　　4．完整学习套餐，为读者提供贴心服务。参考手册11部、网页模版83类、素材源程序，让学习更加方便。<br>　　5．讲解通俗翔实，看得懂学得会才是硬道理。</p>
]]></content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/PDF/HTML&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;



&lt;p&gt;HTML5+CSS3从入门到精通是通过基础知识+中小实例
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML5与CSS3权威指南(完整版)</title>
    <link href="http://yoursite.com/2017/04/19/html-css-quanweipdf/"/>
    <id>http://yoursite.com/2017/04/19/html-css-quanweipdf/</id>
    <published>2017-04-19T07:31:31.000Z</published>
    <updated>2017-04-19T08:13:33.737Z</updated>
    
    <content type="html"><![CDATA[

	<div class="row">
    <embed src="/PDF/HTML5与CSS3权威指南(完整版).pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>HTML 5与CSS 3指南（第3版）是HTML 5与CSS 3领域公认的标杆之作，被读者誉为“系统学习HTML 5与CSS 3的著作”和“Web前端工程师案头必备图书之一”。 不仅是HTML 5与CSS 3图书领域当之无愧的领头羊，而且在整个原创计算机图书领域是佼佼者。</p>
<p>第3版首先从技术的角度根据的HTML 5和CSS 3标准进行了更新和补充，其次根据读者的反馈对内容的组织结构和写作方式做了进一步的优化，内容更经典，阅读体验也更好。</p>
]]></content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/PDF/HTML5与CSS3权威指南(完整版).pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;



&lt;p&gt;HTML 5与CS
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript权威指南(第六版)中文扫描版</title>
    <link href="http://yoursite.com/2017/04/19/javascriptquanweizhinan/"/>
    <id>http://yoursite.com/2017/04/19/javascriptquanweizhinan/</id>
    <published>2017-04-19T06:46:10.000Z</published>
    <updated>2017-04-19T08:16:00.199Z</updated>
    
    <content type="html"><![CDATA[

	<div class="row">
    <embed src="/PDF/JavaScript权威指南(第六版).(美)David.Flanagan.中文扫描版.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>《JavaScript权威指南（第6版）》主要讲述的内容涵盖JavaScript语言本身，以及Web浏览器所实现的JavaScript API。本书第6版涵盖了HTML5和ECMAScript 5，很多章节完全重写，增加了当今Web开发的最佳实践的内容，新增的章节包括jQuery、服务器端JavaScript、图形编程以及 JavaScript式的面向对象。本书不仅适合初学者系统学习，也适合有经验的 JavaScript 开发者随手翻阅。</p>
]]></content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/PDF/JavaScript权威指南(第六版).(美)David.Flanagan.中文扫描版.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计(第3版)</title>
    <link href="http://yoursite.com/2017/04/19/JavaScriptgaojichengxusheji/"/>
    <id>http://yoursite.com/2017/04/19/JavaScriptgaojichengxusheji/</id>
    <published>2017-04-19T04:30:58.000Z</published>
    <updated>2017-04-19T08:16:29.749Z</updated>
    
    <content type="html"><![CDATA[

	<div class="row">
    <embed src="/PDF/JavaScript高级程序设计(第3版).pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>《JavaScript高级程序设计(第3版)》是JavaScript超级畅销书的最新版。ECMAScript5和HTML5在标准之争中双双胜出，使大量专有实现和客户端扩展正式进入规范，同时也为JavaScript增添了很多适应未来发展的新特性。<br>《JavaScript高级程序设计》这一版除增加5章全新内容外，其他章节也有较大幅度的增补和修订，新内容篇幅约占三分之一。</p>
]]></content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/PDF/JavaScript高级程序设计(第3版).pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;



&lt;p&gt;《JavaSc
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript字符串操作、 JSON、 this</title>
    <link href="http://yoursite.com/2017/04/14/1101-json/"/>
    <id>http://yoursite.com/2017/04/14/1101-json/</id>
    <published>2017-04-14T09:34:35.000Z</published>
    <updated>2017-04-14T09:40:59.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS字符串操作"><a href="#JS字符串操作" class="headerlink" title="JS字符串操作"></a>JS字符串操作</h1><blockquote>
<p>“字符串对象”是Javascript内置的字符块处理对象，用于定义及处理字符串。</p>
</blockquote>
<ol>
<li><p>声明字符串的两种方法:</p>
<ul>
<li><code>var str1 =  &quot;string1&quot; ;</code></li>
<li><code>var str2 = new String(&quot;string2&quot;);</code></li>
</ul>
<blockquote>
<p>两种方式的差别:str1是一个字符串，类型是string ，而str2则是对象“ string2”的引用，类型是对象。如果引用被修改，str2也会被修改</p>
</blockquote>
</li>
<li><p>字符串操作方法</p>
<ol>
<li>charAt() 返回指定位置的字符</li>
<li>charCodeAt() 返回指定位置的字符的Unicode编码</li>
<li>search() 用于检索字符串中指定的子字符串</li>
<li>replace() 查找匹配指定的字符串，然后用新字符串代替匹配的字符串</li>
<li>concat() 将两个戒多个字符的文本组合起来，返回一个新的字符串</li>
<li>使用加号链接字符串。 newStr = “string1”+”string2”</li>
<li>indexOf() 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回 -1</li>
<li>lastIndexOf() 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1</li>
<li>slice() 提取字符串的一部分，并返回一个新字符串。两个参数，第一个为起始位置，第二个为终止位置（留头不留尾），如果没有end，就取到末尾</li>
<li>substring() 返回字符串的一个子串。传入参数是起始位置和结束位置。（留头不留尾），如果没有end，就取到末尾</li>
<li>split() 通过将字符串划分成子串，将一个字符串做成一个字符串数组。</li>
<li>Length 返回字符串的长度（其包含的字符的个数）</li>
<li>toLowerCase() 将整个字符串转成小写字母</li>
<li>toUpperCase() 将整个字符串转成大写字母</li>
<li>转义字符 \<br>我们平时想输出一个双引号（“”）我们会这样写：<br><code>document.write(“””);</code><br>但是这样写是错诨的,所以我们需要用到转义字符：<br><code>document.write(“ \””);</code></li>
</ol>
</li>
</ol>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<p>JSON，全称是JavaScript Object Notation。它是基于JavaScript编程诧言ECMA-262 3rd EditionDecember 1999标准的一种轻量级的数据交换格式，主要用于跟服务器进行交换数据。跟XML相类似，它独立诧言，在跨平台数据传输上有很大的优势。</p>
</blockquote>
<ol>
<li><p>JSON的书写格式：</p>
<ol>
<li>格式一：<code>{ “name”:“ xiaoming”, “age”:“22”, “email”:&quot;jone@163.com&quot; };</code></li>
<li><p>格式二:  </p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"name"</span>:<span class="string">"xiaoming"</span>,  </div><div class="line"><span class="attr">"age"</span>:<span class="string">"22"</span>,  </div><div class="line"><span class="attr">"friends"</span>:[  </div><div class="line">	&#123;<span class="attr">"name"</span>:&#123;<span class="attr">"firstName"</span>:<span class="string">"liu"</span>,<span class="attr">"lastName"</span>:<span class="string">"wei"</span>&#125;,<span class="attr">"age"</span>:<span class="string">"23"</span>&#125;,  </div><div class="line">	&#123;<span class="attr">"name"</span>:&#123;<span class="attr">"firstName"</span>:<span class="string">"li"</span>,<span class="attr">"lastName"</span>:<span class="string">"mei"</span>&#125;,<span class="attr">"age"</span>:<span class="string">"27"</span>&#125;  </div><div class="line">]  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>取值</p>
<ul>
<li>用“点”来取得相应的值，如<code>JSON.name</code></li>
</ul>
</li>
<li><p>JSON和字符串之间转换</p>
<ol>
<li>JSON.stringify(json)</li>
<li>JSON.parse(str) </li>
</ol>
</li>
<li><p>JSON拷贝</p>
<blockquote>
<p>深拷贝,浅拷贝</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h1 id="This-关键字"><a href="#This-关键字" class="headerlink" title="This 关键字"></a>This 关键字</h1><ol>
<li><p>this概念 :</p>
<ol>
<li>this是Javascript诧言的一个关键字它代表函数运行时，自劢生成的一个内部对象，只能在函数内部使用</li>
<li><p>三种情况下的this指向: </p>
<ol>
<li>纯粹的函数调用:  this指向调用函数的对象</li>
<li>作为对象方法的调用: this指向window</li>
<li>作为构造函数调用: this指向构造函数的实例</li>
</ol>
</li>
<li><p>修改this指向:</p>
<ol>
<li>使用call()方法<pre><code>1. 语法：call(thisObj，Object)
2. 定义：调用一个对象的一个方法，以另一个对象替换当前对象 
</code></pre></li>
<li>使用apply()方法<pre><code>1. 语法：apply(thisObj，[argArray])
2.  定义：应用某一对象的一个方法，用另一个对象替换当前对象
</code></pre></li>
</ol>
</li>
<li>使用new关键字</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS字符串操作&quot;&gt;&lt;a href=&quot;#JS字符串操作&quot; class=&quot;headerlink&quot; title=&quot;JS字符串操作&quot;&gt;&lt;/a&gt;JS字符串操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“字符串对象”是Javascript内置的字符块处理对象，用于定义及处理字
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS函数,对象/类,定时器</title>
    <link href="http://yoursite.com/2017/04/14/1001-function/"/>
    <id>http://yoursite.com/2017/04/14/1001-function/</id>
    <published>2017-04-14T08:51:14.000Z</published>
    <updated>2017-04-14T08:52:27.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS函数-对象-类-定时器"><a href="#JS函数-对象-类-定时器" class="headerlink" title="JS函数,对象/类,定时器"></a>JS函数,对象/类,定时器</h1><h2 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h2><ul>
<li><p>JavaScript函数定义：</p>
<blockquote>
<p>不带参数的函数 </p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//这里是要执行的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>&gt; 带参数的函数

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">var1,var2</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//这里是要执行的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>

&gt; 调用不带参数的函数
`myFunction()`
&gt; 调用带参数的函数
`myFunction(argument1,argument2)`

**在调用函数时，您可以向其传递值，这些值被称为参数。您可以发送任意多的参数，由逗号 (,) 分隔**
</code></pre><ul>
<li><p>带有返回值的函数</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> x=<span class="number">5</span>;</div><div class="line"><span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myVar=myFunction();</div></pre></td></tr></table></figure>
<blockquote>
<p>myVar 变量的值是 5也就是上面的函数返回值5</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>匿名函数<strong>(匿名函数就是没有实际名字的函数)</strong></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//匿名函数</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">alert(<span class="string">'water'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li><p>匿名函数的调用</p>
<blockquote>
<p>要调用一个函数，我们必须要有方法定位它，引用它。所以，我们会需要帮它找一个名字。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> abc=<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> x+y;</div><div class="line">&#125;</div><div class="line">alert(abc(<span class="number">2</span>,<span class="number">3</span>));</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="JS对象-类"><a href="#JS对象-类" class="headerlink" title="JS对象/类"></a>JS对象/类</h2><ul>
<li><p>对象:</p>
<ul>
<li>面向对象编程的核心</li>
<li>表示现实世界中的实体</li>
<li>为计算机应用程序提供实用基础</li>
<li>完成特定任务<blockquote>
<p>对象是存在的具体实体，具有明确定义的状态和行为。<br>对象：用来描述客观事物的一个实体，由一组属性和方法构成</p>
</blockquote>
</li>
</ul>
</li>
<li><p>类</p>
<blockquote>
<p>具有相同属性和方法的一组对象的集合类是对象的类型<br>类是模子，确定对象将会拥有的特征（属性）和行为（方法）</p>
</blockquote>
<ul>
<li><p>类的创建</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//类成员的定义及构造函数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建一个学生类</li>
<li><p>每个学生都有年龄、姓名、班级和爱好。用类的思想编写学生类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Students</span> (<span class="params">name,age,grade,hobby</span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name=name; <span class="comment">//姓名</span></div><div class="line"><span class="keyword">this</span>. age=age; <span class="comment">//年龄</span></div><div class="line"><span class="keyword">this</span>. grade=grade; <span class="comment">//班级</span></div><div class="line"><span class="keyword">this</span>. Hobby=hobby; <span class="comment">//爱好</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为Students引用类型创建几个属性getName和setName方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Students.prototype.getName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line">Students.prototype.setName=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name=name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建和使用引用类型的实例</p>
<blockquote>
<p>创建对象语法：var 对象名 = new 类名();</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用对象示例：</span></div><div class="line"><span class="keyword">var</span> Student01=<span class="keyword">new</span> Students(<span class="string">"张三"</span>,<span class="string">"20"</span>,<span class="string">"2"</span>,<span class="string">"唱歌"</span>);</div><div class="line"><span class="keyword">var</span> Student02=<span class="keyword">new</span> Students(<span class="string">"李四"</span>,<span class="string">"30"</span>,<span class="string">"3"</span>,<span class="string">"跳舞"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>引用对象成员：使用“ .” 进行以下操作 类的创建不引用</p>
<blockquote>
<p>属性：对象名.属性<br>方法：对象名.方法名()</p>
</blockquote>
</li>
<li><p>调用getName ()方法及age属性等，并将结果输出到页面上：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"我叫："</span>+Student01.getName()+<span class="string">"年龄:"</span>+Student01.age+<span class="string">",所在班级："</span>+Student01.getGrade()+<span class="string">"，我的爱好是："</span>+Student01.getHobby()+<span class="string">"。 "</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="JS定时器"><a href="#JS定时器" class="headerlink" title="JS定时器"></a>JS定时器</h2><blockquote>
<p>JavaScript中有两类计时器，即一次性计时器和定期<br>触发计时器。</p>
<p>一次性计时器仅在指定的时间后触发一次(<code>setTimeout()</code>)<br>定期触发计时器是每隔一定时间就触发一次(<code>setInterval()</code>)</p>
</blockquote>
<ul>
<li><p>一次性计时器：</p>
<ul>
<li><p>使用window对象的setTimeout()方法</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Window.setTimeout(“<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;”,delay)</div></pre></td></tr></table></figure>
</li>
<li><p>setTimeout()方法接收两参数，第一个是要执行的JavaScript代码，可以是一个函数，也可以是几个函数，函数间用“；”隔开即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//页面加载3秒后触发的计时器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.setTimeout(hello,<span class="number">3000</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>清除定时器</p>
<ul>
<li><code>clearTimeout(定时器id)</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>定期触发计时器</p>
<blockquote>
<p>setInterval()方法的参数不setTimeout()方法相同，但第二<br>个参数丌是计时器触发前的时间，而是计时器的触发间隔，<br>该间隔以毫秒为单位。<br><code>Var myTimerID=setInterval(“ myFunction(){}”,5000);</code></p>
</blockquote>
<ul>
<li>清除定时器<br><code>window.clearInterval(timer2)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>两者的区别在:  一个只执行一次,另一个没过一段时间就 执行一次;</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>函数</p>
<blockquote>
<p>不带参数的函数,带参数的函数,匿名函数,函数返回值 </p>
</blockquote>
</li>
<li><p>对象, 类</p>
<blockquote>
<p>概念,创建,使用</p>
</blockquote>
</li>
<li><p>定时器</p>
<blockquote>
<p> 概念,创建,使用<code>setTimeout(), clearTimeout(),setInterval(),clearIearval()</code></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS函数-对象-类-定时器&quot;&gt;&lt;a href=&quot;#JS函数-对象-类-定时器&quot; class=&quot;headerlink&quot; title=&quot;JS函数,对象/类,定时器&quot;&gt;&lt;/a&gt;JS函数,对象/类,定时器&lt;/h1&gt;&lt;h2 id=&quot;JS函数&quot;&gt;&lt;a href=&quot;#JS函数&quot;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手把手告诉你如何安装多个版本的node</title>
    <link href="http://yoursite.com/2017/04/13/nodejs/"/>
    <id>http://yoursite.com/2017/04/13/nodejs/</id>
    <published>2017-04-13T05:32:56.000Z</published>
    <updated>2017-04-13T07:04:56.969Z</updated>
    
    <content type="html"><![CDATA[<p>最近好多人都问到node怎么同时安装多个版本? 如何配置node的环境变量,如何自如的在多个版本中切换node?因为这种种原因,所有打算写一篇文章来专门讲解如何安装多个版本的node!!!</p>
<p><strong>node版本可以去 <a href="http://nodejs.cn/" target="_blank" rel="external">node中网网</a> 或者到我的 <a href="http://pan.baidu.com/s/1c2qw1f6" target="_blank" rel="external">百度云盘</a> 下载</strong></p>
<blockquote>
<p>安装多个版本的node的时候一定要从低版本开始安装,如果你先安装高版本的话会出现许多问题,如果你已经安装啦,先卸载掉然后进行下面的步骤</p>
</blockquote>
<ol>
<li>下载后得到啦安装包,有32位和64位的多版本安装包,用户根据自己系统自行选择<br> <img src="/images/01.png" alt="node安装bao"></li>
<li>在安装node之前,我先选择一个node安装目录,我要安装到D盘下,所有我在D盘中新建啦一个node的目录,并且在里面创建啦一个4.42的文件夹,应为我一会要在这个文件夹中安装4.42版本的node<br>  <img src="/images/02.png" alt="node安装bao"></li>
<li><p>开始安装:</p>
<ol>
<li>打开node4.42的安装包,一直点击下一步,直到出现安装路径:<br> <img src="/images/03.png" alt="node安装bao"><br>  <img src="/images/04.png" alt="node安装bao"></li>
<li>安装路径更改我们创建的那个4.42文件夹的路径,然后一路下一步,安装成功后文件夹内出现啦好多文件,这个时候node就安装好啦<blockquote>
<p>把里面的路径改成<code>D:\node\4.42\</code><br>  <img src="/images/05.png" alt="node安装bao"></p>
</blockquote>
</li>
<li>node安装好后是不是就能用啦呢?当然不是,你还需要配置环境变量  计算机=&gt; 属性=&gt; 高级系统设置=&gt;环境变量<br>  <img src="/images/06.png" alt="node安装bao"><br>  <img src="/images/07.png" alt="node安装bao"><br>  <img src="/images/08.png" alt="node安装bao"></li>
<li>在系统变量中点击新建,变量名:node_4.42,变量值就是你4.42版本的安装目录,也就是<code>D:\node\4.42\</code><br>  <img src="/images/08.png" alt="node安装bao"><br>  <img src="/images/10.png" alt="node安装bao"></li>
<li>点击确定后再系统变量中找到<code>path</code> 变量,选中后点击编辑<br>  <img src="/images/11.png" alt="node安装bao"></li>
<li>看到<code>path</code>变量中的值啦嘛?我们把刚才新建的变量添加到这里面,如何添加呢? 一对<code>%</code>号,中间写上刚才新建的变量明,然后放到path中的最后面,一定不能忘啦中间的<code>;</code>号,每条变量中间都应该有个<code>;</code><br>  <img src="/images/12.png" alt="node安装bao"><br>  <img src="/images/13.png" alt="node安装bao"></li>
<li><p>放好后点击确定,然后咱们打开<code>CMD</code>  (win+R);输入:</p>
<blockquote>
<p>$ node -v<br>  <img src="/images/14.png" alt="node安装bao"></p>
</blockquote>
</li>
<li><p>如何出现啦版本号,那么我们的第一个node已经安装完成并且可以正常使用啦;</p>
</li>
</ol>
</li>
</ol>
<ol>
<li><p>安装多个版本:第一个安装好后安装第二个node版本;</p>
<ol>
<li><p>在安装新的版本之前,我们需要做的就是先找到之前的那个版本的安装目录,也就是<code>D:\node\4.42</code>,然后把4.42这个文件夹给他重命名(因为你如果不修改名字的话你在安装新版本的时候无论你安装在什么地方,都会把之前的那个干掉):<br>  <img src="/images/15.png" alt="node安装bao"></p>
</li>
<li><p>修改后再创建一个新的目录,我给他取名叫5.11(因为我打算下一个安装5.11版本的)<br>  <img src="/images/16.png" alt="node安装bao"></p>
</li>
<li><p>接下来开始安装5.11就可以啦,还是和上面过程一样,直到配置完环境变量后我们的5.11就安装好啦.<br>  <img src="/images/17.png" alt="node安装bao"></p>
</li>
<li><p>安装好5.11的版本后咱们再回来吧4.42的那个目录改回来;<br>  <img src="/images/18.png" alt="node安装bao"></p>
</li>
<li><p>验证我们目前是否是安装了两个node版本:<code>where node</code> ,和当前使用的版本:<code>node -v</code></p>
<blockquote>
<p>$ where node</p>
</blockquote>
<p> <img src="/images/19.png" alt="node安装bao"></p>
<blockquote>
<p>where node 出现啦两个,说明我们确实是安装啦两个版本的node,<code>node -v</code> 告诉我们当前使用的是哪个版本!!!</p>
<p>如果我们还要在安装其他版本的话方法也是一样的,按照上面的就可以啦</p>
</blockquote>
</li>
</ol>
</li>
<li><p>假如我们现在安装啦许多的node,但是当前的node版本不是我目前想用的怎么办呢?如何切换node版本呢?</p>
<ol>
<li><p>打开环境变量,找到<code>path</code>.你想用哪个版本,就把哪个node变量放到所有node变量的最前面,比如我之前的path是%node_4.42%;%node_5.11%,我用的就是4.42的版本,我如果想<br>用5.11的版本的话我就得把path里面的<code>%node_4.42%;%node_5.11%</code>改成<code>%node_5.11%;%node_4.42%</code><br><img src="/images/20.png" alt="node安装bao"></p>
<p>2 这时候我们再看看: <code>where node</code>和<code>node -v</code><br><img src="/images/21.png" alt="node安装bao"></p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>这就是我们的安装多个版本node和node之间的版本切换;</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近好多人都问到node怎么同时安装多个版本? 如何配置node的环境变量,如何自如的在多个版本中切换node?因为这种种原因,所有打算写一篇文章来专门讲解如何安装多个版本的node!!!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node版本可以去 &lt;a href=&quot;http://n
    
    </summary>
    
      <category term="环境安装" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/nodejs/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>webtool</title>
    <link href="http://yoursite.com/2017/04/11/webtool/"/>
    <id>http://yoursite.com/2017/04/11/webtool/</id>
    <published>2017-04-11T05:19:23.000Z</published>
    <updated>2017-04-11T05:33:38.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些前端开发的干货"><a href="#一些前端开发的干货" class="headerlink" title="一些前端开发的干货"></a>一些前端开发的干货</h1><p>@(前端乱炖)</p>
<p>标签（空格分隔）： 资料</p>
<h3 id="出处-https-coding-net-u-f2e-p-Books-git-tree-master-E7-A7-BB-E5-8A-A8Web"><a href="#出处-https-coding-net-u-f2e-p-Books-git-tree-master-E7-A7-BB-E5-8A-A8Web" class="headerlink" title="出处:https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web"></a>出处:<a href="https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web" target="_blank" rel="external">https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web</a></h3><h3 id="包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改"><a href="#包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改" class="headerlink" title="包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改"></a>包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改</h3><hr>
<p>有些虽已经年代久远，但仍然可以学到很多有用的东西,可以整理资料的链接和其他链接资料或许有重复……<br><a href="https://github.com/qingniao99/front-end-collect" target="_blank" rel="external">–&gt;&gt;另外一个链接:分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a><br><a href="https://github.com/dypsilon/frontend-dev-bookmarks" target="_blank" rel="external">库</a></p>
<h2 id="常用库查询系统"><a href="#常用库查询系统" class="headerlink" title="常用库查询系统"></a><a href="http://hackr.io/" target="_blank" rel="external">常用库查询系统</a></h2><h2 id="常用库查询系统2-迷你库"><a href="#常用库查询系统2-迷你库" class="headerlink" title="常用库查询系统2 - 迷你库"></a><a href="http://microjs.com/" target="_blank" rel="external">常用库查询系统2 - 迷你库</a></h2><h3 id="扩展库"><a href="#扩展库" class="headerlink" title="扩展库"></a>扩展库</h3><ul>
<li><a href="https://github.com/es-shims/es5-shim" target="_blank" rel="external">es5-shim</a></li>
<li>[es6-promise] (<a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="external">https://github.com/stefanpenner/es6-promise</a>)</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>-<a href="http://avalonjs.coding.me/" target="_blank" rel="external">avalon 2 中文文档</a><br>-<a href="http://vuejs.org.cn/guide/" target="_blank" rel="external">vue1.0 中文文档</a><br>-<a href="https://vuefe.cn/" target="_blank" rel="external">vue2.0 中文文档</a> </p>
<h3 id="移动端资料"><a href="#移动端资料" class="headerlink" title="移动端资料"></a>移动端资料</h3><ul>
<li><a href="http://am-team.github.io/amg/dev-exp-doc.html" target="_blank" rel="external">支付宝无线Web开发经验谈</a></li>
<li><a href="http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201411/290576.shtml" target="_blank" rel="external">移动前端系列——移动端页面坑与排坑技巧( 2014-12-08 )</a></li>
<li><a href="http://www.ipresst.com/play/528892e11d0495f30f00762e" target="_blank" rel="external">移动web最佳实践（2013）</a></li>
<li><a href="http://www.jingwentian.com/t-135" target="_blank" rel="external">移动Web前端框架 ( 2014 ) </a></li>
<li><a href="https://github.com/amfe/lib.flexible" target="_blank" rel="external">移动端自适应方案-lib.flexible,淘宝手机版都是用这个框架</a></li>
<li><a href="http://www.w3ctech.com/topic/1165#rd" target="_blank" rel="external">iOS 微信 音频 视频自动播放</a></li>
<li><a href="http://www.w3cmark.com/2016/434.html" target="_blank" rel="external">解决ios下的微信打开的页面背景音乐无法自动播放</a></li>
<li><a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">微信JS-SDK说明文档</a></li>
<li><a href="http://203.195.235.76/jssdk/" target="_blank" rel="external">微信js demo</a></li>
<li><a href="http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/" target="_blank" rel="external">QQ浏览器X5内核问题汇总</a></li>
<li><a href="http://viewportsizes.com/" target="_blank" rel="external">手机分辨率查询</a></li>
<li><a href="https://github.com/peunzhang/pageResponse" target="_blank" rel="external">移动端响应式框架-测试阶段,不适用于复杂页面</a></li>
</ul>
<h3 id="学习资料-文章"><a href="#学习资料-文章" class="headerlink" title="学习资料/文章"></a>学习资料/文章</h3><ul>
<li><a href="https://github.com/sundway/blog/issues/2" target="_blank" rel="external">渲染性能</a></li>
<li><a href="https://github.com/wwsun/awesome-javascript" target="_blank" rel="external">awesome-javascript</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">JavaScript教程 - 廖雪峰的官方网站</a></li>
<li><a href="http://www.cnblogs.com/xirongliu/p/4589834.html" target="_blank" rel="external">Github使用指南-从新手到专家 </a></li>
<li><a href="https://github.com/youyudehexie/node123" target="_blank" rel="external">node.js中文资料导航</a></li>
<li><a href="https://github.com/vndmtrx/awesome-nodejs" target="_blank" rel="external">了不起的Nodejs Nodejs的各种资源,英文</a></li>
<li><a href="https://github.com/justjavac/AngularJS-Learning-zh_CN" target="_blank" rel="external">AngularJS ,一些关于 AngularJS 的博客，文章，视频，书籍等</a></li>
<li><a href="https://github.com/island205/HelloSea.js" target="_blank" rel="external">HelloSea.js seajs教程</a></li>
<li><a href="https://github.com/ZhangBohan/http-api-design-ZH_CN" target="_blank" rel="external">HTTP API 设计指南</a></li>
<li><a href="https://github.com/justjavac/json-api-zh_CN" target="_blank" rel="external">JSON API：用 JSON 构建 API 的标准指南中文版</a></li>
<li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">了不起的React React的各种资源,英文</a></li>
<li><a href="https://github.com/s5s5/CSS-Animations" target="_blank" rel="external">一家伙（s5s5）学习css3动画的心得</a></li>
<li><a href="https://github.com/iamjoel/be-grace-front-end-developer" target="_blank" rel="external">让WEB前端的变优雅的东东，如：代码规范，代码组织，最佳实践之类</a></li>
<li><a href="https://github.com/codylindley/frontend-tools" target="_blank" rel="external">前端工具推荐</a></li>
<li><a href="http://shengxi.sinaapp.com/WS/content.html" target="_blank" rel="external">设计规范 -强烈推荐看</a></li>
<li><a href="http://tgideas.qq.com/" target="_blank" rel="external">腾讯团队web移动文章</a></li>
<li><a href="http://www.zhihu.com/question/27743708#answer-17103050" target="_blank" rel="external">视觉设计师是怎样让前端工程师 100% 实现设计效果的？</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://www.cnblogs.com/keepfool/p/5619070.html" target="_blank" rel="external">vue 教程</a></li>
<li><a href="https://github.com/xitu/gold-miner/blob/master/TODO/smooth-css-animations.md" target="_blank" rel="external">10 个原则让动画带你飞</a></li>
<li><a href="http://reactnative.cn/" target="_blank" rel="external">React Native 中文网</a></li>
<li><a href="http://cssreference.io/" target="_blank" rel="external">cssreference.io</a></li>
<li><a href="https://www.kancloud.cn/dengyigegushi/details-dahua/100439" target="_blank" rel="external">大话设计模式</a></li>
</ul>
<h3 id="书籍资料"><a href="#书籍资料" class="headerlink" title="书籍资料"></a>书籍资料</h3><ul>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的计算机编程类中文书籍</a></li>
<li><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">免费编程书籍</a></li>
<li><a href="https://github.com/nemoTyrant/manong" target="_blank" rel="external">码农周刊整理-推荐关注</a></li>
<li><a href="https://github.com/xirong/my-git" target="_blank" rel="external">git资料</a></li>
</ul>
<h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程</a></li>
<li><a href="https://github.com/ele828/react-native-guide" target="_blank" rel="external">React-Native学习指南</a></li>
<li><a href="http://jo2.org/html5-canvas-tutorial-list/" target="_blank" rel="external">html5 Canvas画图系列教程目录</a></li>
<li><a href="http://www.cnblogs.com/jikey/p/3613082.html" target="_blank" rel="external">web前端开发分享-目录系列</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/4001284.html" target="_blank" rel="external">深入理解javascript原型和闭包系列</a></li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
<li><a href="http://shichuan.github.io/javascript-patterns/" target="_blank" rel="external">JavaScript模式集合</a></li>
<li><a href="http://bbs.html5cn.org/forum.php?mod=viewthread&amp;tid=3335" target="_blank" rel="external">深入理解JavaScripts设计模式系列：</a></li>
<li><a href="http://www.cnblogs.com/chenssy/p/3357683.html" target="_blank" rel="external">设计模式总结,非js</a></li>
<li><a href="http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/" target="_blank" rel="external">7 天打造前端性能监控系统</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/#5.2" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="http://zhuanlan.zhihu.com/wooyun/19756127" target="_blank" rel="external">前端之困 · XSS CookBook系列</a></li>
<li><a href="https://cnodejs.org/topic/551200e6d792542a29789a43" target="_blank" rel="external">一个月时间整理《深入浅出Node.js》</a></li>
<li><a href="http://www.cnblogs.com/xing901022/p/4309840.html" target="_blank" rel="external">【web必知必会】——图解HTTP</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰-JavaScript基础教程</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">MDN JavaScript基础教程</a></li>
<li><a href="http://colobu.com/2014/09/23/45-Useful-JavaScript-Tips,-Tricks-and-Best-Practices/" target="_blank" rel="external">45个实用的JavaScript技巧、窍门和最佳实践</a></li>
</ul>
<hr>
<h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><ul>
<li><a href="http://the-echoplex.net/flexyboxes/" target="_blank" rel="external">flexbox在线制作器</a> </li>
<li><a href="https://tonytony.club/spark/" target="_blank" rel="external">SPARK动画平台 这是我们组做的一个动画效果平台，里面集合了所有的牛逼动画，可以让你灵感猛增！（目前已开放外网使用）</a></li>
<li><a href="http://a.singlediv.com/" target="_blank" rel="external">OneDiv 这是个神奇的网站，里面的所有细节都是用一个div元素通过复杂的Css3实现的，有空可以去开开脑洞噢</a></li>
<li><a href="http://cubic-bezier.com/" target="_blank" rel="external">贝塞尔曲线生成器 </a></li>
<li><a href="http://html5please.com/" title="html5与css3技术应用评估" target="_blank" rel="external">HTML5 与 CSS3 技术应用评估</a></li>
<li><a href="http://browserhacks.com/" title="各种奇妙的hack" target="_blank" rel="external">各种奇妙的hack</a></li>
<li><a href="http://en.wikipedia.org/wiki/List_of_displays_by_pixel_density" title="几乎所有设备的屏幕尺寸与像素密度表" target="_blank" rel="external">几乎所有设备的屏幕尺寸与像素密度表</a></li>
<li><a href="http://screensiz.es/phone" title="移动设备参数表" target="_blank" rel="external">移动设备参数表</a></li>
<li><a href="http://ivomynttinen.com/blog/the-ios-design-cheat-sheet-volume-2/" title="ios端移动设备参数速查" target="_blank" rel="external">ios端移动设备参数速查</a></li>
<li><a href="http://www.quirksmode.org/compatibility.html" title="浏览器兼容表" target="_blank" rel="external">浏览器兼容表</a></li>
<li><a href="https://deviceatlas.com/device-data/devices" title="移动设备查询器" target="_blank" rel="external">移动设备查询器</a></li>
<li><a href="http://51degrees.codeplex.com/" title="移动设备适配库" target="_blank" rel="external">移动设备适配库</a></li>
<li><a href="http://detectmobilebrowsers.com/" title="移动设备适配库2" target="_blank" rel="external">移动设备适配库2</a></li>
<li><a href="https://deviceatlas.com/device-data/devices" title="viewport与设备尺寸在线检测器" target="_blank" rel="external">viewport与设备尺寸在线检测器</a></li>
<li><a href="http://mobilehtml5.org/" title="html5移动端兼容性速查" target="_blank" rel="external">html5 移动端兼容性速查</a></li>
<li><a href="http://www.fontsquirrel.com/tools/webfont-generator" title="在线转换字体" target="_blank" rel="external">在线转换字体</a></li>
<li><a href="http://tools.css3.info/selectors-test/test.html" title="css3选择器测试" target="_blank" rel="external">css3 选择器测试</a></li>
<li><a href="http://caniuse.com/" title="兼容性速查表" target="_blank" rel="external">兼容性速查表</a></li>
<li><a href="http://www.browserscope.org/" title="浏览器的一些独特参数" target="_blank" rel="external">浏览器的一些独特参数</a></li>
<li><a href="http://nmsdvid.com/snippets/" title="各种各样的媒体查询收集" target="_blank" rel="external">各种各样的媒体查询收集</a></li>
<li><a href="http://include-media.com/" target="_blank" rel="external">sass @include-media 媒体查询库</a> <a href="https://github.com/eduardoboucas/include-media" target="_blank" rel="external">https://github.com/eduardoboucas/include-media</a></li>
<li><a href="http://ecd.tencent.com/css3/tools.html" title="css3动画在线制作器" target="_blank" rel="external">css3 动画在线制作器</a></li>
<li><a href="http://www.colorzilla.com/gradient-editor/" title="css3渐变在线制作器" target="_blank" rel="external">css3 渐变在线制作器</a></li>
<li><a href="http://ww1.sinaimg.cn/bmiddle/c2c57f68jw1e4fh7dmw12j20fi2w6qe1.jpg" title="移动端手势表" target="_blank" rel="external">移动端手势表</a></li>
<li><a href="http://ued.ctrip.com/blog/wp-content/webkitcss/" title="webkit独有的样式分析" target="_blank" rel="external">webkit独有的样式分析</a></li>
<li><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills" target="_blank" rel="external">HTML5 Cross Browser Polyfills</a></li>
<li><a href="http://html5polyfill.com/" title="HTML5 POLYFILLS" target="_blank" rel="external">HTML5 POLYFILLS</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="https://isux.tencent.com/zhitu-client.html" target="_blank" rel="external">智图客户端 – 你的图片你做主,本地图片快速压缩工具</a></li>
<li><a href="https://github.com/soimort/you-get" target="_blank" rel="external">网站视频/音乐 扒神器</a></li>
</ul>
<p>###js插件网站</p>
<ul>
<li><a href="http://jquer.in/" target="_blank" rel="external">jquer.in</a></li>
<li><a href="http://www.open-lib.com/" target="_blank" rel="external">OpenLib–http://www.open-lib.com/</a></li>
<li><a href="http://www.jq22.com/" target="_blank" rel="external">Query插件库–http://www.jq22.com/</a></li>
<li><a href="http://www.htmleaf.com/" target="_blank" rel="external">jquery之家–http://www.htmleaf.com/</a></li>
<li><a href="http://www.sharetk.com/" target="_blank" rel="external">分享天空–http://www.sharetk.com/</a></li>
<li><a href="http://www.jqueryscript.net/" target="_blank" rel="external">jQuery Script–http://www.jqueryscript.net/</a></li>
<li><a href="http://www.dowebok.com/" target="_blank" rel="external">dowebok 做好网站–http://www.dowebok.com/ </a></li>
<li><a href="http://www.zjgsq.com/" target="_blank" rel="external">Web前端开发–http://www.zjgsq.com/</a></li>
</ul>
<h3 id="前端组件库"><a href="#前端组件库" class="headerlink" title="前端组件库"></a>前端组件库</h3><blockquote>
<p>搭建web app常用的样式/组件等收集列表(移动优先)</p>
</blockquote>
<h2 id="手势库"><a href="#手势库" class="headerlink" title="手势库"></a>手势库</h2><ul>
<li><a href="http://labs.rampinteractive.co.uk/touchSwipe/demos/index.html" target="_blank" rel="external">TouchSwipe </a></li>
</ul>
<h2 id="vue-ui组件库"><a href="#vue-ui组件库" class="headerlink" title="vue ui组件库"></a>vue ui组件库</h2><ul>
<li><a href="https://github.com/airyland/vux" target="_blank" rel="external">微信UI Vux 支持@^1.0.24</a></li>
<li><a href="https://github.com/yuche/vue-strap" target="_blank" rel="external">bootstrap风格 Vux 支持@v1.x.x</a></li>
<li><a href="https://github.com/posva/vue-mdl" target="_blank" rel="external">material风格 vue-mdl </a></li>
<li><a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="external">Keen-UI </a></li>
<li><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="external">Mint UI </a></li>
<li><a href="https://github.com/iview/iview" target="_blank" rel="external">iView UI</a></li>
<li><a href="http://element.eleme.io" target="_blank" rel="external">element UI 支持vue@2.0</a></li>
<li><a href="https://museui.github.io/" target="_blank" rel="external">Muse-UI - 基于 Vue 2.0 和 Material Desigin 的 UI 组件库</a></li>
</ul>
<h2 id="前端自动化-Workflow"><a href="#前端自动化-Workflow" class="headerlink" title="前端自动化(Workflow)"></a>前端自动化(Workflow)</h2><ul>
<li>前端构建工具<ul>
<li><a href="https://github.com/yeoman/yeoman" target="_blank" rel="external">Yeoman - a set of tools for automating development workflow</a></li>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">gulp - The streaming build system</a></li>
<li><a href="http://gruntjs.com/" target="_blank" rel="external">grunt - the JavaScript Task Runner</a></li>
<li><a href="https://github.com/fex-team/fis" target="_blank" rel="external">F.I.S - 前端集成解决方案</a></li>
</ul>
</li>
<li>前端模块管理器<ul>
<li><a href="http://bower.io/" target="_blank" rel="external">Bower - A package manager for the web</a></li>
<li><a href="http://browserify.org/" target="_blank" rel="external">Browserify</a></li>
<li><a href="https://github.com/componentjs/component" target="_blank" rel="external">Component</a></li>
<li><a href="http://duojs.org/" target="_blank" rel="external">Duo</a></li>
<li><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a></li>
<li><a href="http://seajs.org/" target="_blank" rel="external">Sea.js</a></li>
<li><a href="http://webpack.github.io/docs/" target="_blank" rel="external">webpack</a></li>
</ul>
</li>
<li>css预处理器<ul>
<li><a href="http://lesscss.org/" target="_blank" rel="external">Less - Less is More , Than CSS</a></li>
<li><a href="http://sass-lang.com/" target="_blank" rel="external">Sass - Syntactically Awesome Style Sheets</a></li>
<li><a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus - Expressive, dynamic, robust CSS</a></li>
</ul>
</li>
</ul>
<h2 id="1-前端框架-Frameworks"><a href="#1-前端框架-Frameworks" class="headerlink" title="1. 前端框架(Frameworks)"></a>1. 前端框架(Frameworks)</h2><ul>
<li><a href="http://material-ui.com/#/components/appbar" target="_blank" rel="external">Material-UI 移动端ui框架,效果好</a> <a href="https://github.com/callemall/material-ui" target="_blank" rel="external">github</a></li>
<li><a href="http://frozenui.github.io/" target="_blank" rel="external">Frozen UI 腾讯移动UI框架</a></li>
<li><a href="https://github.com/twbs/bootstrap" target="_blank" rel="external">Bootstrap</a></li>
<li><a href="https://github.com/zurb/foundation" target="_blank" rel="external">Foundation</a></li>
<li><a href="http://amazeui.org/" target="_blank" rel="external">Amaze UI</a></li>
<li><a href="https://github.com/semantic-org/semantic-ui" target="_blank" rel="external">Semantic UI</a></li>
<li><a href="http://purecss.io/" target="_blank" rel="external">Pure CSS</a></li>
<li><a href="https://github.com/topcoat/topcoat" target="_blank" rel="external">topcoat</a></li>
<li><a href="https://github.com/uikit/uikit" target="_blank" rel="external">UIkit</a></li>
<li><a href="https://github.com/callemall/material-ui" target="_blank" rel="external">Material UI</a></li>
<li><a href="http://www.idangero.us/framework7" target="_blank" rel="external">Framework7</a></li>
<li><a href="https://github.com/dcloudio/mui" target="_blank" rel="external">mui</a></li>
<li><a href="http://ionicframework.com/" target="_blank" rel="external">ionic framework</a></li>
<li><a href="https://github.com/jaunesarmiento/fries" target="_blank" rel="external">Fries</a></li>
<li><a href="http://jquerymobile.com/" target="_blank" rel="external">jQuery Mobile</a></li>
<li><a href="http://h-ui.net/index.shtml" target="_blank" rel="external">H-ui 前端框架</a></li>
<li><p><a href="https://github.com/dhg/Skeleton" target="_blank" rel="external">Skeleton</a></p>
<h2 id="2-JavaScript-框架汇总"><a href="#2-JavaScript-框架汇总" class="headerlink" title="2. JavaScript 框架汇总"></a>2. JavaScript 框架汇总</h2></li>
<li><p>JavaScript 框架</p>
<ul>
<li><a href="https://github.com/facebook/react" target="_blank" rel="external">react</a></li>
<li><a href="https://github.com/angular/angular" target="_blank" rel="external">Angular</a></li>
<li><a href="https://github.com/jquery/jquery" target="_blank" rel="external">jQuery</a></li>
<li><a href="https://github.com/jashkenas/backbone" target="_blank" rel="external">Backbone.js</a></li>
<li><a href="https://github.com/ractivejs/ractive" target="_blank" rel="external">Ractive.js</a></li>
<li><a href="https://github.com/kissyteam/kissy" target="_blank" rel="external">KISSY</a></li>
<li><a href="https://github.com/madrobby/zepto" target="_blank" rel="external">Zepto.js</a></li>
<li><a href="http://github.e-sites.nl/zeptobuilder/" target="_blank" rel="external">ZeptoBuilder是Zepto的一个在线版本，从列表中选取你想包含的文件，就能得到你自定义的构建了</a></li>
<li><a href="http://vanilla-js.com/" target="_blank" rel="external">Vanilla JS</a></li>
<li><a href="https://github.com/RubyLouvre/avalon" target="_blank" rel="external">Avalon</a></li>
<li><a href="https://github.com/bendc/sprint" target="_blank" rel="external">Sprint.js - 一个高性能、小体积的 DOM 操作库 (Benjamin De Cock) </a></li>
<li><a href="http://jslite.io/" target="_blank" rel="external">JSLite.js</a></li>
</ul>
</li>
<li><p>轻量级JavaScript框架</p>
<ul>
<li><a href="https://github.com/remy/min.js" target="_blank" rel="external">Min.js - Super minimal selector and event library</a></li>
<li><a href="https://github.com/n33/skel" target="_blank" rel="external">skel.js - A lightweight responsive framework</a></li>
<li>[LAB.js 异步加载js]</li>
</ul>
</li>
<li><p>JavaScript 工具库</p>
<ul>
<li><a href="https://github.com/jashkenas/underscore" target="_blank" rel="external">underscore.js</a></li>
<li><a href="https://github.com/gwendall/way.js" target="_blank" rel="external">Way.js - 双向数据绑定库</a></li>
<li><a href="https://github.com/bitwalker/keys.js" target="_blank" rel="external">Keys.js - 应用快捷键</a></li>
<li><a href="https://github.com/ccampbell/mousetrap" target="_blank" rel="external">Mousetrap - 键盘快捷键操作</a></li>
<li><a href="https://github.com/yyx990803/vue" target="_blank" rel="external">Vue.js - 数据驱动的组件化MVVM库</a></li>
<li><a href="http://alloyteam.github.io/AlloyLever/" target="_blank" rel="external">移动web开发调试工具AlloyLever介绍 - 打印信息</a></li>
<li><a href="https://github.com/WechatFE/vConsole/blob/dev/README_CN.md" target="_blank" rel="external">vConsole.js 同上</a></li>
</ul>
</li>
</ul>
<h2 id="3-前端游戏框架-动画引擎"><a href="#3-前端游戏框架-动画引擎" class="headerlink" title="3. 前端游戏框架(动画引擎)"></a>3. 前端游戏框架(动画引擎)</h2><ul>
<li><a href="https://github.com/hiloteam/Hilo" target="_blank" rel="external">Hilo 跨终端的互动游戏解决方案 阿里出品</a></li>
<li><a href="http://www.pixijs.com/" target="_blank" rel="external"> Pixi.js 3.0.7 - WebGL 国外游戏引擎</a> <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="external">https://github.com/pixijs/pixi.js</a></li>
<li><a href="https://github.com/cocos2d/cocos2d-html5" target="_blank" rel="external">cocos2d-html5</a></li>
<li><a href="http://www.egret-labs.org/" target="_blank" rel="external">Egret Engine</a></li>
<li><a href="https://github.com/digitalfruit/limejs" target="_blank" rel="external">LimeJS</a></li>
<li><a href="https://github.com/CreateJS/EaselJS" target="_blank" rel="external">EaselJS</a></li>
<li><a href="https://github.com/mrdoob/three.js" target="_blank" rel="external">three.js</a></li>
<li><a href="https://github.com/AlloyTeam/AlloyStick" target="_blank" rel="external">AlloyStick</a></li>
<li><a href="https://github.com/finscn/The-Best-JS-Game-Framework" target="_blank" rel="external">The-Best-JS-Game-Framework</a></li>
<li><a href="https://github.com/RSamaium/CanvasEngine" target="_blank" rel="external">CanvasEngine</a></li>
<li><a href="https://github.com/cykod/Quintus" target="_blank" rel="external">Quintus</a></li>
<li><a href="http://layabox.com/" target="_blank" rel="external">LayaAir 引擎 国内游戏框架,跟白鹭比较??暂时不知道</a></li>
<li><a href="http://soya2d.com" target="_blank" rel="external">soya2d 一个 好学、易用、强大、开源的 H5游戏引擎 现在,有你掌控</a></li>
</ul>
<h2 id="4-ui组件库"><a href="#4-ui组件库" class="headerlink" title="4. ui组件库"></a>4. ui组件库</h2><ul>
<li><a href="https://github.com/fex-team/GMU" target="_blank" rel="external">GMU - 基于zepto的ui组件库，适用于移动端</a></li>
<li><a href="https://github.com/frozenui/frozenui" target="_blank" rel="external">FrozenUI - 腾讯移动端组件库</a></li>
<li><a href="http://nec.netease.com/" target="_blank" rel="external">NEC</a></li>
<li><a href="http://nej.netease.com/" target="_blank" rel="external">NEJ</a></li>
<li><a href="https://github.com/LFeh/css-components/" target="_blank" rel="external">Pure CSS Components</a></li>
<li><a href="https://github.com/adamschwartz/magic-of-css" target="_blank" rel="external">magic-of-css</a></li>
<li><a href="https://github.com/primer/primer" target="_blank" rel="external">Primer - The CSS toolkit and guidelines that power GitHub</a></li>
<li>[ZUI - 一个开源前端实践方案，帮助你快速构现代跨屏应用。][1]</li>
<li>[WeX5开源前端][2]</li>
<li>[B-JUI][3]</li>
<li><a href="https://www.muicss.com/" target="_blank" rel="external">MUI 轻量级WEB框架</a></li>
<li><a href="http://lihongxun945.github.io/jquery-weui/" target="_blank" rel="external">jQuery WeUI - V0.7.1 WeUI 的jQuery实现版，提供了大量官方WeUI没有的组件, 同时兼容 jQuery 和 Zepto。</a></li>
<li><a href="http://www.light7.cn/" target="_blank" rel="external">Light7 手机ui组件</a></li>
</ul>
<h2 id="5-基础模版"><a href="#5-基础模版" class="headerlink" title="5. 基础模版"></a>5. 基础模版</h2><ul>
<li>浏览器统一(Cross Browser)<ul>
<li><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="external">HTML5 BOILERPLATE</a></li>
<li><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="external">Modernizr</a></li>
<li><a href="https://github.com/necolas/normalize.css/" target="_blank" rel="external">Normalize.css</a></li>
<li><a href="https://github.com/imsky/cssFx" target="_blank" rel="external">cssFx - 为CSS3自动生成浏览器前缀</a></li>
<li><a href="https://github.com/LeaVerou/prefixfree" target="_blank" rel="external">-prefix-free - Break free from CSS prefix hell</a></li>
</ul>
</li>
<li>响应式<ul>
<li><a href="https://github.com/ResponsiveBP/Responsive" target="_blank" rel="external">Responsive - 响应式布局</a></li>
<li><a href="https://github.com/WickyNilliams/enquire.js" target="_blank" rel="external">Enquire.js - Awesome Media Queries in JavaScript</a></li>
<li><a href="https://github.com/kombai/freewall" target="_blank" rel="external">Free Wall - 创建桌面，移动和平板的动态网格布局</a></li>
</ul>
</li>
</ul>
<h2 id="6-排版"><a href="#6-排版" class="headerlink" title="6. 排版"></a>6. 排版</h2><ul>
<li><a href="https://github.com/lepture/yue.css" target="_blank" rel="external">yue.css</a></li>
<li><a href="https://github.com/sofish/typo.css" target="_blank" rel="external">typo.css</a></li>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">chinese-copywriting-guidelines - 中文文案排版指南</a></li>
</ul>
<h2 id="7-网格系统"><a href="#7-网格系统" class="headerlink" title="7. 网格系统"></a>7. 网格系统</h2><ul>
<li><a href="https://github.com/lzxb/flex.css" target="_blank" rel="external">flex.css - 快速入门，极速布局</a></li>
<li><a href="https://github.com/aekaplan/grid" target="_blank" rel="external">grid</a></li>
<li><a href="https://github.com/kristoferjoseph/flexboxgrid" target="_blank" rel="external">Flexbox Grid</a></li>
<li><a href="https://github.com/DrewDahlman/Mason" target="_blank" rel="external">MasonJS - creating a perfect grid</a></li>
<li><a href="http://juicedcss.com/" target="_blank" rel="external">Juiced: a Flexbox CSS Framework</a></li>
<li><a href="http://neutroncss.com/" target="_blank" rel="external">Neutron 创建灵化、简洁网页布局的SASS框架</a></li>
<li><a href="http://flexible.gs" target="_blank" rel="external">flexible.gs 灵活的响应式栅格布局CSS框架</a></li>
<li><a href="http://decorator.codable.org" target="_blank" rel="external">Decorator - HTML, CSS, and JavaScrip 前端框架</a></li>
<li><p><a href="http://alves.im/minigrid/" target="_blank" rel="external">minigrid.js 只有2KB的零依赖栅格布局-瀑布流</a></p>
<h2 id="8-HTML5-API-应用"><a href="#8-HTML5-API-应用" class="headerlink" title="8. HTML5 API 应用"></a>8. HTML5 API 应用</h2></li>
<li><p><a href="https://github.com/browserstate/history.js" target="_blank" rel="external">History.js - gracefully supports the HTML5 History/State APIs</a></p>
</li>
<li><a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="external">jquery-pjax - pushState+ajax</a></li>
<li><a href="https://github.com/asual/jquery-address" target="_blank" rel="external">jquery-address - Deep Linking</a></li>
<li><a href="https://github.com/alexgibson/notify.js" target="_blank" rel="external">Notify.js(Web Notifications API)</a></li>
</ul>
<h2 id="9-UA-识别"><a href="#9-UA-识别" class="headerlink" title="9. UA 识别"></a>9. UA 识别</h2><ul>
<li><a href="https://github.com/hotoo/detector" target="_blank" rel="external">detector</a></li>
</ul>
<h2 id="10-表单处理"><a href="#10-表单处理" class="headerlink" title="10. 表单处理"></a>10. 表单处理</h2><h3 id="10-1-表单验证-Form-Validator-表单提示"><a href="#10-1-表单验证-Form-Validator-表单提示" class="headerlink" title="10.1 表单验证(Form Validator)/表单提示"></a>10.1 表单验证(Form Validator)/表单提示</h3><ul>
<li><a href="https://github.com/niceue/validator" target="_blank" rel="external">Validator</a></li>
<li><a href="https://github.com/guillaumepotier/Parsley.js" target="_blank" rel="external">Parsley</a></li>
<li><a href="https://github.com/malsup/form" target="_blank" rel="external">jquery.form.js - jQuery Form Plugin</a></li>
<li><a href="https://github.com/haiercdboy/Validform" target="_blank" rel="external">Validform</a></li>
<li><a href="https://github.com/sofish/validator.js" target="_blank" rel="external">validator.js</a></li>
<li><a href="https://github.com/jzaefferer/jquery-validation" target="_blank" rel="external">jquery-validation - jQuery Validation Plugin</a></li>
<li><a href="https://github.com/victorjonsson/jQuery-Form-Validator" target="_blank" rel="external">formvalidator.js</a></li>
<li><a href="http://github.com/Colourity/Fort.js" target="_blank" rel="external">Fort.js – 表单填写进度提示</a></li>
<li><a href="https://github.com/mailcheck/mailcheck" target="_blank" rel="external">mailcheck - 用于检测email地址的域名</a></li>
<li><a href="https://github.com/clubdesign/floatlabels.js" target="_blank" rel="external">Floatlable.js - 输入时显示placeholder文本</a></li>
<li><a href="https://github.com/peachananr/label_better" target="_blank" rel="external">jQuery Label Better</a></li>
</ul>
<h3 id="10-2-lt-select-gt-相关"><a href="#10-2-lt-select-gt-相关" class="headerlink" title="10.2 &lt; select &gt; 相关"></a>10.2 &lt; select &gt; 相关</h3><ul>
<li><a href="https://github.com/harvesthq/chosen" target="_blank" rel="external">Chosen</a></li>
<li><a href="https://github.com/select2/select2" target="_blank" rel="external">Select2</a></li>
<li><a href="https://github.com/silviomoreto/bootstrap-select" target="_blank" rel="external">bootstrap-select</a></li>
</ul>
<h3 id="10-3-单选框-复选框相关"><a href="#10-3-单选框-复选框相关" class="headerlink" title="10.3 单选框/复选框相关"></a>10.3 单选框/复选框相关</h3><ul>
<li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="external">iCheck - 增强复选框和单选按钮</a></li>
</ul>
<h3 id="10-4-上传组件"><a href="#10-4-上传组件" class="headerlink" title="10.4 上传组件"></a>10.4 上传组件</h3><ul>
<li><a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank" rel="external">jQuery File Upload Plugin</a></li>
<li><a href="http://fex-team.github.io/webuploader/" target="_blank" rel="external">百度 Web Uploader</a></li>
<li><a href="http://www.uploadify.com/" target="_blank" rel="external">Uploadify</a></li>
<li><a href="https://github.com/moxiecode/plupload" target="_blank" rel="external">Plupload</a></li>
<li><a href="http://fineuploader.com/index.html" target="_blank" rel="external">Fine Uploader</a></li>
<li><a href="https://github.com/aralejs/upload" target="_blank" rel="external">arale-upload - 轻量级 iframe and html5 file uploader</a></li>
<li><a href="https://github.com/enyo/dropzone" target="_blank" rel="external">Dropzone.js - drag’n’drop library拖拽上传</a></li>
<li><a href="https://github.com/flowjs/flow.js" target="_blank" rel="external">flow.js</a></li>
<li><a href="https://github.com/think2011/localResizeIMG3" target="_blank" rel="external">localResizeIMG3 - 前端本地客户端压缩图片，兼容IOS，Android，PC</a></li>
<li><p><a href="http://mailru.github.io/FileAPI/" target="_blank" rel="external">FileAPI - 是文件上传（单个/多个）、拖放支持、图像裁剪、大小调整、应用过滤器和获取文件信息</a><br>-<a href="http://www.resumablejs.com/" target="_blank" rel="external">Resumable.JS 通过HTML5API提供了稳定可恢复的多文件上传功能。</a></p>
<h3 id="10-5-日期选择"><a href="#10-5-日期选择" class="headerlink" title="10.5 日期选择"></a>10.5 日期选择</h3></li>
<li><p><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="external">Both Date and Time picker widget based on twitter bootstrap</a></p>
</li>
<li><a href="http://gmu.baidu.com/demo/widget/calendar/calendar.html" target="_blank" rel="external">GMU 日历组件</a></li>
<li><a href="https://github.com/acidb/mobiscroll" target="_blank" rel="external">Mobiscroll</a></li>
<li><a href="https://github.com/dbushell/Pikaday" target="_blank" rel="external">Pikaday - 日期选择器</a></li>
<li><p><a href="http://timeline.knightlab.com/" target="_blank" rel="external">TimelineJS - 时间轴</a></p>
<h3 id="10-6-取色"><a href="#10-6-取色" class="headerlink" title="10.6 取色"></a>10.6 取色</h3></li>
<li><p><a href="https://github.com/mjolnic/bootstrap-colorpicker" target="_blank" rel="external">Colorpicker plugin for Twitter Bootstrap</a></p>
</li>
</ul>
<h3 id="10-7-标签插件-Tag"><a href="#10-7-标签插件-Tag" class="headerlink" title="10.7 标签插件(Tag)"></a>10.7 标签插件(Tag)</h3><ul>
<li><a href="https://github.com/sniperwolf/taggingJS" target="_blank" rel="external">TaggingJS – 可以灵活定制的 jQuery 标签系统插件</a></li>
<li><a href="https://github.com/brianreavis/selectize.js" target="_blank" rel="external">selectize.js</a></li>
</ul>
<h3 id="10-8-自动完成插件"><a href="#10-8-自动完成插件" class="headerlink" title="10.8 自动完成插件"></a>10.8 自动完成插件</h3><ul>
<li><a href="https://github.com/ichord/At.js" target="_blank" rel="external">At.js - 一个Twitter/微博样式的@自动完成插件</a></li>
<li><a href="https://github.com/yuku-t/jquery-textcomplete" target="_blank" rel="external">jquery-textcomplete - 智能搜索提示框/自动补全</a></li>
<li><a href="https://github.com/twitter/typeahead.js" target="_blank" rel="external">typeahead.js - a fast and fully-featured autocomplete library</a></li>
<li><a href="http://leaverou.github.io/awesomplete/" target="_blank" rel="external">Awesomplete - 零依赖的简单自动完成插件</a> - <a href="https://github.com/LeaVerou/awesomplete" target="_blank" rel="external">github</a></li>
</ul>
<h3 id="10-9-样式修正"><a href="#10-9-样式修正" class="headerlink" title="10.9 样式修正"></a>10.9 样式修正</h3><ul>
<li><a href="https://github.com/jackmoore/autosize" target="_blank" rel="external">autosize - 使文本框自动适应所输入的内容</a></li>
</ul>
<h2 id="11-图表绘制-图形库-Graphics"><a href="#11-图表绘制-图形库-Graphics" class="headerlink" title="11. 图表绘制/图形库(Graphics)"></a>11. 图表绘制/图形库(Graphics)</h2><ul>
<li><a href="https://github.com/highslide-software/highcharts.com" target="_blank" rel="external">Highcharts</a></li>
<li><a href="https://github.com/nnnick/Chart.js" target="_blank" rel="external">Chart.js - 基于HTML5的JavaScript图表</a></li>
<li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="external">百度 ECharts</a></li>
<li><a href="https://github.com/gionkunz/chartist-js" target="_blank" rel="external">Chartist.js</a></li>
<li><a href="https://github.com/mbostock/d3" target="_blank" rel="external">D3.js - A JavaScript visualization library for HTML and SVG.</a></li>
<li><a href="https://github.com/square/intro-to-d3" target="_blank" rel="external">intro-to-d3 - a D3.js tutorial</a></li>
<li><a href="https://github.com/uxebu/bonsai" target="_blank" rel="external">Bonsai - 一个功能强大的JavaScript图形库</a></li>
<li><a href="http://fastly.github.io/epoch/" target="_blank" rel="external">Epoch - 漂亮、平稳流畅和高性能可视化的图表库</a></li>
<li><a href="http://jonobr1.github.io/two.js/" target="_blank" rel="external">SVG 2D绘图</a></li>
<li><p><a href="https://alexk111.github.io/SVG-Morpheus/" target="_blank" rel="external">SVG Morpheus - SVG图形变形动画</a></p>
<h2 id="12-日期格式化"><a href="#12-日期格式化" class="headerlink" title="12. 日期格式化"></a>12. 日期格式化</h2></li>
<li><p><a href="http://momentjs.com/" target="_blank" rel="external">Moment.js - 日期处理</a></p>
</li>
<li><a href="https://github.com/pragmaticly/smart-time-ago" target="_blank" rel="external">Smart Time Ago - 显示相对时间</a></li>
<li><a href="http://formatjs.io/" target="_blank" rel="external">FormatJS – 让你的 Web 应用程序国际化</a><h2 id="13-页面交互"><a href="#13-页面交互" class="headerlink" title="13. 页面交互"></a>13. 页面交互</h2></li>
</ul>
<h3 id="13-1-Slider"><a href="#13-1-Slider" class="headerlink" title="13.1 Slider"></a>13.1 Slider</h3><ul>
<li><a href="https://github.com/kenwheeler/slick/" target="_blank" rel="external">slick - the last carousel you’ll ever need</a></li>
<li><a href="https://github.com/thebird/Swipe" target="_blank" rel="external">Swipe - the most accurate touch slider</a></li>
<li><a href="http://www.idangero.us/swiper/demos/#.VUCEQUYr_pA" target="_blank" rel="external">Swiper - 移动端/pc端滑动组件比较强大</a> - <a href="https://github.com/nolimits4web/Swiper" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/cubiq/iscroll" target="_blank" rel="external">iscroll - 简约模拟滑动层</a></li>
<li><a href="https://github.com/BE-FE/iSlider" target="_blank" rel="external">iSlider - 移动端滑动组件</a></li>
<li><a href="https://github.com/OwlFonk/OwlCarousel" target="_blank" rel="external">OwlCarousel - create beautiful responsive carousel slider</a></li>
<li><a href="https://github.com/jquery/jquery-mousewheel/" target="_blank" rel="external">jquery-mousewheel - jQuery鼠标滚轮滚动侦测插件</a></li>
<li><a href="https://github.com/jedrzejchalubek/Glide.js" target="_blank" rel="external">Glide.js - 轻量级滑块组件</a></li>
</ul>
<h3 id="13-2-瀑布流"><a href="#13-2-瀑布流" class="headerlink" title="13.2 瀑布流"></a>13.2 瀑布流</h3><ul>
<li><a href="http://masonry.desandro.com/" target="_blank" rel="external">Masonry</a></li>
<li><a href="http://isotope.metafizzy.co/" target="_blank" rel="external">Isotope - Filter &amp; sort magical layouts</a></li>
</ul>
<h3 id="13-3-懒加载-加载监听-预加载"><a href="#13-3-懒加载-加载监听-预加载" class="headerlink" title="13.3 懒加载/加载监听/预加载"></a>13.3 懒加载/加载监听/预加载</h3><ul>
<li><a href="http://callmecavs.github.io/layzr.js/" target="_blank" rel="external">layzr.js - git关注蛮高的</a> - <a href="https://github.com/callmecavs/layzr.js" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/desandro/imagesloaded" target="_blank" rel="external">imagesLoaded</a></li>
<li><a href="https://github.com/toddmotto/echo" target="_blank" rel="external">Echo.js</a></li>
<li><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="external">lazySizes</a></li>
<li><a href="https://github.com/tuupola/jquery_lazyload" target="_blank" rel="external">jquery_lazyload</a></li>
<li><a href="https://github.com/shprink/bttrlazyloading/" target="_blank" rel="external">BttrLazyLoading</a></li>
<li><a href="https://github.com/vvo/lazyload" target="_blank" rel="external">lazyload.js</a></li>
<li><a href="https://github.com/alexanderdickson/waitForImages" target="_blank" rel="external">waitForImages - 图片加载监听库</a></li>
<li><a href="https://github.com/thinkpixellab/PxLoader" target="_blank" rel="external">PxLoader - JS预加载库:实现图片、声音等各种文件的预加载功能</a></li>
<li><a href="https://github.com/htmlhero/jQuery.preload/blob/master/src/jquery.preload.js" target="_blank" rel="external">jQuery.preload - 预加载图片资源</a></li>
<li><a href="https://github.com/bgrins/bindWithDelay" target="_blank" rel="external">bindWithDelay - jQuery Plugin For Delayed Event Execution</a></li>
<li><a href="https://github.com/dennyferra/TypeWatch" target="_blank" rel="external">TypeWatch - 停止输入时调用</a></li>
</ul>
<h3 id="13-4-图片轮播-幻灯片-图片展示"><a href="#13-4-图片轮播-幻灯片-图片展示" class="headerlink" title="13.4 图片轮播(幻灯片)/图片展示"></a>13.4 图片轮播(幻灯片)/图片展示</h3><ul>
<li><a href="http://www.SuperSlide2.com/" target="_blank" rel="external">SuperSlide - 国产的幻灯片,功能集成比较多,我个人推荐</a></li>
<li><a href="https://github.com/woothemes/FlexSlider" target="_blank" rel="external">FlexSlider</a></li>
<li><a href="https://github.com/idiot/unslider" target="_blank" rel="external">unslider - 小而美的轮播库</a></li>
<li><a href="https://github.com/scaron/prettyphoto" target="_blank" rel="external">prettyPhoto</a></li>
<li><a href="https://github.com/chrishumboldt/Flickerplate" target="_blank" rel="external">FlickerPlate - A cool jQuery plugin that lets you flick through content.</a></li>
<li><a href="https://github.com/imsky/holder" target="_blank" rel="external">Holder.js - Client-side image placeholders.</a></li>
<li><a href="https://github.com/brunjo/rowGrid.js" target="_blank" rel="external">RowGrid.js - 在径直的行里放置图片</a></li>
<li><a href="http://osvaldas.info/examples/image-lightbox-responsive-touch-friendly/" target="_blank" rel="external">ImageLightbox.js - 灯箱效果</a></li>
<li><a href="https://github.com/peachananr/panorama_viewer" target="_blank" rel="external">JQuery Panorama Viewer - 全景视图</a></li>
<li><a href="http://photoswipe.com/" target="_blank" rel="external">PhotoSwipe - 移动开发必备的 iOS 风格相册</a> - <a href="https://github.com/dimsemenov/photoswipe" target="_blank" rel="external">github</a></li>
</ul>
<h3 id="13-5-图片剪裁-图片处理"><a href="#13-5-图片剪裁-图片处理" class="headerlink" title="13.5 图片剪裁/图片处理"></a>13.5 图片剪裁/图片处理</h3><ul>
<li><a href="https://github.com/tapmodo/Jcrop" target="_blank" rel="external">Jcrop -  Image Cropping Plugin for jQuery</a></li>
<li><a href="https://github.com/sconsult/croppic" target="_blank" rel="external">croppic - an image cropping jquery plugin</a></li>
<li><a href="https://github.com/boblemarin/jQuery.eraser" target="_blank" rel="external">jQuery.eraser - 图像擦除插件</a></li>
<li><a href="http://www.dillerdesign.com/experiment/DD_belatedPNG/" target="_blank" rel="external">DD_belatedPNG.js - 让IE6支持透明PNG图片</a></li>
<li><a href="https://github.com/jonom/jquery-focuspoint" target="_blank" rel="external">FocusPoint.js 实现图片的响应式裁剪</a></li>
<li><a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">Picturefill - 一个响应式图片 JS 插件 (Scott Jehl) </a></li>
<li><a href="http://www.jqueryscript.net/zoom/jQuery-Plugin-For-Image-Zoom-On-Hover-picZoomer.html" target="_blank" rel="external">jQuery picZoomer - 图片区域放大</a></li>
<li><p><a href="http://brianium.github.io/watermarkjs/" target="_blank" rel="external">watermark.js 为图片添加水印</a></p>
<h3 id="13-6-进度条-加载动画-Loading"><a href="#13-6-进度条-加载动画-Loading" class="headerlink" title="13.6 进度条/加载动画(Loading)"></a>13.6 进度条/加载动画(Loading)</h3></li>
<li><p><a href="http://ricostacruz.com/nprogress/" target="_blank" rel="external">NProgress.js</a></p>
</li>
<li><a href="https://github.com/usablica/progress.js" target="_blank" rel="external">progress.js</a></li>
<li><a href="https://github.com/HubSpot/pace" target="_blank" rel="external">Pace - Automatic page load progress bar</a></li>
<li><a href="https://github.com/englercj/jquery-ajax-progress" target="_blank" rel="external">jquery-ajax-progress</a></li>
<li><a href="https://github.com/vadimsva/waitMe" target="_blank" rel="external">waitMe - 很漂亮的loading效果</a></li>
<li><a href="https://github.com/fgnass/spin.js" target="_blank" rel="external">spin.js</a></li>
<li><a href="https://github.com/padolsey/sonic.js" target="_blank" rel="external">sonic.js</a></li>
<li><a href="https://github.com/joaopereirawd/fakeLoader.js" target="_blank" rel="external">fakeLoader.js - 依赖jQ的全屏加载js</a></li>
<li><p><a href="https://github.com/rendro/easy-pie-chart" target="_blank" rel="external">Easy Pie Chart</a></p>
<h3 id="13-7-侧滑插件-offcancas"><a href="#13-7-侧滑插件-offcancas" class="headerlink" title="13.7 侧滑插件(offcancas)"></a>13.7 侧滑插件(offcancas)</h3></li>
<li><p><a href="https://github.com/christophery/pushy" target="_blank" rel="external">pushy -  a responsive off-canvas navigation menu </a></p>
</li>
<li><a href="https://github.com/mango/slideout" target="_blank" rel="external">Slideout.js - 一个用于移动 Web 应用的触摸滑出式导航菜单</a></li>
</ul>
<h3 id="13-8-菜单-Menu"><a href="#13-8-菜单-Menu" class="headerlink" title="13.8 菜单(Menu)"></a>13.8 菜单(Menu)</h3><ul>
<li><a href="https://github.com/joeldbirch/superfish" target="_blank" rel="external">SuperFish - 基于jQuery的级联下拉菜单</a></li>
<li><a href="https://github.com/viljamis/responsive-nav.js" target="_blank" rel="external">Responsive Nav - 响应式导航</a></li>
</ul>
<h3 id="13-9-滚动侦测-ScrollSpy"><a href="#13-9-滚动侦测-ScrollSpy" class="headerlink" title="13.9 滚动侦测(ScrollSpy)"></a>13.9 滚动侦测(ScrollSpy)</h3><ul>
<li><a href="https://github.com/sxalexander/jquery-scrollspy" target="_blank" rel="external">jquery-scrollspy(1)</a></li>
<li><a href="https://github.com/thesmart/jquery-scrollspy" target="_blank" rel="external">jquery-scrollspy(2)</a></li>
<li><a href="https://github.com/imakewebthings/waypoints" target="_blank" rel="external">Waypoints</a></li>
<li><a href="https://github.com/janpaepke/ScrollMagic" target="_blank" rel="external">ScrollMagic - 像进度条一样使用滚动条</a></li>
<li><a href="http://silvestreh.github.io/onScreen/" target="_blank" rel="external">onScreen - 滚动加载,滚动固定</a></li>
</ul>
<h3 id="13-10-滚动加载更多-下拉刷新-Pull-to-Refresh"><a href="#13-10-滚动加载更多-下拉刷新-Pull-to-Refresh" class="headerlink" title="13.10 滚动加载更多/下拉刷新(Pull to Refresh)"></a>13.10 滚动加载更多/下拉刷新(Pull to Refresh)</h3><ul>
<li><a href="https://github.com/pklauzinski/jscroll" target="_blank" rel="external">jScroll</a></li>
<li><a href="https://github.com/apeatling/web-pull-to-refresh" target="_blank" rel="external">web-pull-to-refresh</a></li>
<li><a href="https://github.com/dwcares/pulltorefresh" target="_blank" rel="external">pulltorefresh</a></li>
<li><a href="https://github.com/ThrivingKings/RubberBand.js" target="_blank" rel="external">RubberBand.js - add pull-to-refresh functionality to any page.</a></li>
<li><a href="http://airbnb.github.io/infinity/" target="_blank" rel="external">infinity.js/∞ .js 无限下拉加载</a></li>
</ul>
<h3 id="13-11-平滑滚动插件-Smooth-Scroll"><a href="#13-11-平滑滚动插件-Smooth-Scroll" class="headerlink" title="13.11 平滑滚动插件(Smooth Scroll)"></a>13.11 平滑滚动插件(Smooth Scroll)</h3><ul>
<li><a href="https://github.com/kswedberg/jquery-smooth-scroll" target="_blank" rel="external">jquery-smooth-scroll</a></li>
<li><a href="https://github.com/flesler/jquery.scrollTo" target="_blank" rel="external">jquery.scrollTo - 平滑滚动到页面指定位置</a></li>
<li><a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="external">smooth-scroll</a></li>
<li><a href="https://github.com/markgoodyear/scrollup" target="_blank" rel="external">scrollUp</a></li>
<li><a href="https://github.com/tholman/elevator.js" target="_blank" rel="external">Elevator.js 一个模拟电梯运行“返回顶部”的 JS 插件 (Tim Holman) </a></li>
</ul>
<h3 id="13-12-全屏滚动-全屏切换"><a href="#13-12-全屏滚动-全屏切换" class="headerlink" title="13.12 全屏滚动/全屏切换"></a>13.12 全屏滚动/全屏切换</h3><ul>
<li><a href="https://github.com/alvarotrigo/pagePiling.js" target="_blank" rel="external">pagePiling.js - 全屏滚动效果</a></li>
<li><a href="https://github.com/alvarotrigo/fullPage.js/" target="_blank" rel="external">fullPage.js</a></li>
<li><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="external">onepage-scroll</a></li>
<li><a href="https://github.com/yanhaijing/zepto.fullpage" target="_blank" rel="external">zepto.fullpage - 专注于移动端的fullPage.js</a></li>
<li><a href="https://github.com/sindresorhus/screenfull.js" target="_blank" rel="external">screenfull.js - 切换全屏模式</a></li>
<li><a href="http://www.slashie.org/space.js/" target="_blank" rel="external">Space.js – HTML 驱动的页面 3D 滚动效果</a> - <a href="https://github.com/gopatrik/space.js" target="_blank" rel="external">github</a></li>
</ul>
<h3 id="13-13-分屏滚动"><a href="#13-13-分屏滚动" class="headerlink" title="13.13 分屏滚动"></a>13.13 分屏滚动</h3><ul>
<li><a href="https://github.com/alvarotrigo/multiscroll.js" target="_blank" rel="external">multiscroll.js - 分屏滚动效果</a></li>
</ul>
<h3 id="13-14-转场效果"><a href="#13-14-转场效果" class="headerlink" title="13.14 转场效果"></a>13.14 转场效果</h3><ul>
<li><a href="https://github.com/blivesta/animsition" target="_blank" rel="external">Animsition - 页面切换时的过渡效果</a></li>
</ul>
<h3 id="13-15-固定元素-Sticky"><a href="#13-15-固定元素-Sticky" class="headerlink" title="13.15 固定元素(Sticky)"></a>13.15 固定元素(Sticky)</h3><ul>
<li><a href="http://leafo.net/sticky-kit/" target="_blank" rel="external">Sticky-Kit 比较出名,功能强大,个人推荐</a></li>
<li><a href="http://www.jozefbutko.com/stickynavbar/" target="_blank" rel="external"> Sticky Navbar -可定点</a></li>
<li><a href="http://imakewebthings.com/waypoints/" target="_blank" rel="external">Waypoints</a></li>
<li><a href="https://github.com/garand/sticky" target="_blank" rel="external">sticky - jQuery Plugin for Sticky Objects</a></li>
<li><a href="https://github.com/webpop/jquery.pin" target="_blank" rel="external">jquery.pin - 固定页面元素</a></li>
<li><a href="https://github.com/LiranCohen/stickUp" target="_blank" rel="external">stickUp</a></li>
<li><a href="https://github.com/iclanzan/slinky" target="_blank" rel="external">Slinky.js - 堆叠头部创建滑动导航列表</a></li>
<li><a href="http://wicky.nillia.ms/headroom.js/" target="_blank" rel="external">Headroom.js</a></li>
<li><a href="http://janpaepke.github.io/ScrollMagic/" target="_blank" rel="external">ScrollMagic</a></li>
<li><a href="https://github.com/yairEO/stickyfloat" target="_blank" rel="external">Sticky Float</a></li>
<li><a href="http://mojotech.github.io/stickymojo/" target="_blank" rel="external">Sticky Mojo</a></li>
<li><a href="https://github.com/stefangabos/Zebra_Pin" target="_blank" rel="external">Zebra Pin</a></li>
<li><a href="https://github.com/somewebmedia/hc-sticky" target="_blank" rel="external">HC-Sticky</a></li>
</ul>
<h3 id="13-16-触控事件"><a href="#13-16-触控事件" class="headerlink" title="13.16 触控事件"></a>13.16 触控事件</h3><ul>
<li><a href="https://github.com/hammerjs/hammer.js" target="_blank" rel="external">Hammer.js</a></li>
<li><a href="https://github.com/stephband/jquery.event.move" target="_blank" rel="external">jquery.event.move.js</a></li>
</ul>
<h3 id="13-17-拖拽组件"><a href="#13-17-拖拽组件" class="headerlink" title="13.17 拖拽组件"></a>13.17 拖拽组件</h3><ul>
<li><a href="https://github.com/desandro/draggabilly" target="_blank" rel="external">Draggabilly - 专注于拖拽功能的 JS 库</a></li>
</ul>
<h3 id="13-18-隐藏或展示页面元素"><a href="#13-18-隐藏或展示页面元素" class="headerlink" title="13.18 隐藏或展示页面元素"></a>13.18 隐藏或展示页面元素</h3><ul>
<li><a href="http://www.bootcss.com/p/headroom.js/" target="_blank" rel="external">Headroom.js - 在不需要页头时将其隐藏</a></li>
<li><a href="https://github.com/jedfoster/Readmore.js" target="_blank" rel="external">Readmore.js - 内容显示与隐藏插件</a></li>
<li><a href="https://github.com/dmotz/oriDomi" target="_blank" rel="external">oriDomi - 像指一样折叠Dom元素</a></li>
</ul>
<h3 id="13-19-滚动条-Scrollbar"><a href="#13-19-滚动条-Scrollbar" class="headerlink" title="13.19 滚动条(Scrollbar)"></a>13.19 滚动条(Scrollbar)</h3><ul>
<li><a href="http://rocha.la/jQuery-slimScroll" target="_blank" rel="external">jQuery-slimScroll pc效果不错5k,手机端不建议是用</a></li>
<li><a href="http://manos.malihu.gr/jquery-custom-content-scroller/" target="_blank" rel="external">jquery.mCustomScrollbar pc,苹果效果不错,安卓效果略差,大小较大</a></li>
<li><a href="https://github.com/vitch/jScrollPane" target="_blank" rel="external">jScrollPane</a></li>
<li><a href="https://github.com/gromo/jquery.scrollbar" target="_blank" rel="external">jquery.scrollbar</a></li>
<li><a href="https://github.com/noraesae/perfect-scrollbar" target="_blank" rel="external">perfect-scrollbar</a></li>
<li><a href="https://github.com/jamesflorentino/nanoScrollerJS" target="_blank" rel="external">nanoScrollerJS</a></li>
<li><a href="https://github.com/wieringen/tinyscrollbar" target="_blank" rel="external">tinyscrollbar</a></li>
</ul>
<h3 id="13-20-视差滚动-Parallax-Scrolling"><a href="#13-20-视差滚动-Parallax-Scrolling" class="headerlink" title="13.20 视差滚动(Parallax Scrolling)"></a>13.20 视差滚动(Parallax Scrolling)</h3><ul>
<li><a href="http://aerolab.github.io/midnight.js/" target="_blank" rel="external">MidnightJS 效果很赞</a></li>
<li><a href="https://github.com/wagerfield/parallax" target="_blank" rel="external">parallax.js</a></li>
<li><a href="https://github.com/stephband/jparallax" target="_blank" rel="external">jparallax</a></li>
<li><a href="http://codepen.io/mike-zarandona/full/Dasnw" target="_blank" rel="external">StickyStack.js</a> <a href="https://github.com/mike-zarandona/StickyStack.js" target="_blank" rel="external">-github</a></li>
<li><a href="https://github.com/johnpolacek/superscrollorama" target="_blank" rel="external">jquery.superscrollorama.js 很酷的动画效果</a></li>
</ul>
<h2 id="14-代码高亮插件-代码编辑器"><a href="#14-代码高亮插件-代码编辑器" class="headerlink" title="14. 代码高亮插件/代码编辑器"></a>14. 代码高亮插件/代码编辑器</h2><ul>
<li><a href="https://code.google.com/p/google-code-prettify/" target="_blank" rel="external">google-code-prettify</a></li>
<li><a href="https://highlightjs.org/" target="_blank" rel="external">highlight.js</a></li>
<li><a href="http://craig.is/making/rainbows" target="_blank" rel="external">Rainbow</a></li>
<li><a href="https://github.com/ajaxorg/ace" target="_blank" rel="external">ACE</a></li>
<li><a href="https://github.com/codemirror/codemirror" target="_blank" rel="external">CodeMirror</a></li>
<li><a href="https://github.com/aramk/crayon-syntax-highlighter" target="_blank" rel="external">Crayon Syntax Highlighter</a></li>
<li><a href="https://github.com/PrismJS/prism" target="_blank" rel="external">prism - Lightweight, robust, elegant syntax highlighting.</a></li>
</ul>
<h2 id="15-UI-Icon-组件"><a href="#15-UI-Icon-组件" class="headerlink" title="15. UI Icon 组件"></a>15. UI Icon 组件</h2><ul>
<li><a href="http://fontawesome.io/icons/" target="_blank" rel="external">Font Awesome</a></li>
<li><a href="http://glyphter.com/" target="_blank" rel="external">Glyphter: The SVG Font Machine</a></li>
<li><a href="http://perfecticons.com/" target="_blank" rel="external">Perfect Icons</a></li>
<li><a href="http://iconizr.com/" target="_blank" rel="external">iconizr</a></li>
<li><a href="http://www.bootcss.com/p/cikonss/" target="_blank" rel="external">Cikonss - 纯CSS实现的响应式Icon</a></li>
<li><a href="https://github.com/danleech/simple-icons" target="_blank" rel="external">Simple Icons</a></li>
</ul>
<h2 id="16-动画-Animate"><a href="#16-动画-Animate" class="headerlink" title="16. 动画(Animate)"></a>16. 动画(Animate)</h2><ul>
<li><p>js动画库</p>
<ul>
<li><a href="http://greensock.com/gsap" target="_blank" rel="external">GSAP.js 最屌的动画库</a></li>
<li><a href="https://github.com/bendc/animateplus" target="_blank" rel="external">Animate Plus  CSS/SVG 动画库</a></li>
<li><a href="https://github.com/juliangarnier/anime" target="_blank" rel="external">anime.js 最近出的动画库,支持svg</a></li>
<li><a href="http://dynamicsjs.com/" target="_blank" rel="external">dynamics.js js动画-很屌的样子,支持svg</a></li>
<li><a href="http://daniel-lundin.github.io/snabbt.js/" target="_blank" rel="external">snabbt.js - 简约的JavaScript动画库</a></li>
<li><a href="https://github.com/rstacruz/jquery.transit" target="_blank" rel="external">Transit - CSS transitions and transformations for jQuery</a></li>
<li><a href="http://visionmedia.github.io/move.js/" target="_blank" rel="external">Move.js - 简化CSS3动画的JS库</a> - <a href="https://github.com/visionmedia/move.js" target="_blank" rel="external">github</a></li>
<li><a href="http://labs.bigroomstudios.com/libraries/animo-js" target="_blank" rel="external">Animo.js - 堆栈动画，创建跨浏览器的模糊效果【效果不错，依赖jq】</a> - <a href="https://github.com/ThrivingKings/animo.js" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/julianshapiro/velocity" target="_blank" rel="external">Velocity.js - 加速JavaScript动画</a></li>
<li><a href="http://www.joelambert.co.uk/morf/" target="_blank" rel="external">Morf.js 提供了一组 JavaScript 方法用于加速 CSS3的各种转换效果，支持的方法都在上图中，无需编写 CSS3 代码。</a> -  <a href="https://github.com/joelambert/morf" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/thomasxiii/lenticular.js" target="_blank" rel="external">lenticular.js - 响应倾斜或鼠标事件创建图片动画</a></li>
<li><a href="https://github.com/peachananr/interactive_3d" target="_blank" rel="external">jQuery Interactive 3D - 使用图片创建一个3D模型</a></li>
<li><a href="https://github.com/ramswaroop/animatescroll.js" target="_blank" rel="external">AnimateScroll - 动画滚动,应该是定点导航动画</a></li>
<li><a href="http://jackrugile.com/jrumble/" target="_blank" rel="external">jq 元素抖动库</a></li>
<li><a href="http://www.createjs.com/#!/CreateJS" target="_blank" rel="external">Tween JS  JavaScript 补间动画库 canvas</a></li>
<li><a href="http://rekapi.com/" target="_blank" rel="external">Rekapi 关键帧动画库</a></li>
<li><a href="http://lab.ejci.net/favico.js/" target="_blank" rel="external">favico.js v0.3.4 控制游览器标签小图标</a> - <a href="https://github.com/ejci/favico.js" target="_blank" rel="external">github</a></li>
<li><a href="http://tholman.com/dom-animator/" target="_blank" rel="external">dom-animator -注释动画</a></li>
</ul>
</li>
<li><p>css动画库</p>
<ul>
<li><a href="http://royjang.github.io/xless/" target="_blank" rel="external">xless - 又一个css动画库</a> <a href="https://github.com/royJang/xless" target="_blank" rel="external">github</a></li>
<li><a href="http://elrumordelaluz.github.io/csshake/#1" target="_blank" rel="external">CSShake - css抖动库</a> - <a href="https://github.com/elrumordelaluz/csshake" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/daneden/animate.css" target="_blank" rel="external">animate.css - css3动画库</a></li>
<li><a href="http://clovisdasilvaneto.github.io/all-animation/" target="_blank" rel="external">all animation - 同上,有sass版本</a> - <a href="https://github.com/clovisdasilvaneto/all-animation" target="_blank" rel="external">github</a></li>
<li><a href="http://dreamsky.github.io/main/blog/magic-css.html" target="_blank" rel="external">magic - CSS3动画特效</a> - <a href="https://github.com/miniMAC/magic" target="_blank" rel="external">gihub</a></li>
<li><a href="https://github.com/nckprsn/scrollme" target="_blank" rel="external">ScrollMe – 在网页中加入各种滚动动画效果</a></li>
<li><a href="http://connoratherton.com/loaders" target="_blank" rel="external">Loaders.css - css加载动画</a> - <a href="https://github.com/ConnorAtherton/loaders.css" target="_blank" rel="external"> github</a></li>
<li><a href="https://github.com/lukehaas/css-loaders" target="_blank" rel="external">css-loaders - 同上</a></li>
<li><a href="http://ianlunn.github.io/Hover/" target="_blank" rel="external">Hover.css</a> - <a href="https://github.com/IanLunn/Hover" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/h5bp/Effeckt.css" target="_blank" rel="external">Effeckt.css - 手机动画库</a></li>
<li><a href="http://nec.netease.com/library/category/#animation" target="_blank" rel="external">NEC动画库</a></li>
<li><a href="http://uilang.com/" target="_blank" rel="external">uilang - a minimal, ui-focused programming language for web designers</a></li>
<li><a href="https://github.com/elrumordelaluz/csshake" target="_blank" rel="external">csshake 带有sass版本</a></li>
<li><a href="https://github.com/anijs/anijs/" target="_blank" rel="external">AniJS - 一个基于声明式语法的CSS动画库</a></li>
<li><a href="https://github.com/tobiasahlin/SpinKit" target="_blank" rel="external">SpinKit ??</a></li>
<li><a href="http://alloyteam.github.io/JXAnimate/" target="_blank" rel="external">JX.Animate - 腾讯css3动画库</a> - <a href="https://github.com/AlloyTeam/JXAnimate" target="_blank" rel="external">github</a></li>
</ul>
</li>
</ul>
<h2 id="17-本地存储"><a href="#17-本地存储" class="headerlink" title="17. 本地存储"></a>17. 本地存储</h2><ul>
<li><a href="https://github.com/zendesk/cross-storage" target="_blank" rel="external">cross-storage - Cross domain local storage</a></li>
<li><a href="https://github.com/mozilla/localForage" target="_blank" rel="external">localForage</a></li>
<li><a href="https://github.com/pouchdb/pouchdb" target="_blank" rel="external">pouchdb</a></li>
<li><a href="https://github.com/Wisembly/basil.js" target="_blank" rel="external">basil.js</a></li>
</ul>
<h2 id="18-模板引擎"><a href="#18-模板引擎" class="headerlink" title="18. 模板引擎"></a>18. 模板引擎</h2><ul>
<li><a href="http://cn.vuejs.org/" target="_blank" rel="external">vue.js ie9+</a></li>
<li><a href="https://github.com/crcn/paperclip.js" target="_blank" rel="external">paperclip.js ie8+</a></li>
<li><a href="https://github.com/janl/mustache.js" target="_blank" rel="external">mustache.js</a></li>
<li><a href="http://www.jingwentian.com/t-66" target="_blank" rel="external">Handlebars.js</a></li>
<li><a href="https://github.com/aui/artTemplate" target="_blank" rel="external">artTemplate</a></li>
<li><a href="https://github.com/wangxiao/BaiduTemplate" target="_blank" rel="external">baiduTemplate</a></li>
<li><a href="https://github.com/BorisMoore/jsrender" target="_blank" rel="external">JSRender</a></li>
<li><a href="https://github.com/tj/ejs" target="_blank" rel="external">EJS - JavaScript Templates</a></li>
<li><a href="https://github.com/PaulGuo/Juicer" target="_blank" rel="external">Juicer - A Light Javascript Templete Engine.</a></li>
<li><a href="https://github.com/twigkit/tempo" target="_blank" rel="external">Tempo</a></li>
<li><a href="https://github.com/moappi/json2html" target="_blank" rel="external">json2html</a></li>
</ul>
<h2 id="19-通知组件-弹框组件-模态窗口"><a href="#19-通知组件-弹框组件-模态窗口" class="headerlink" title="19. 通知组件/弹框组件/模态窗口"></a>19. 通知组件/弹框组件/模态窗口</h2><ul>
<li><a href="http://sentsin.com/jquery/layer/" target="_blank" rel="external">layer.js - 国产,也是集成很多功能,个人推荐</a></li>
<li><a href="http://joaopereirawd.github.io/animatedModal.js/" target="_blank" rel="external">AnimatedModal.js - CSS3  全屏模态窗口,支持 Firefox、Chrome、Safari、Opera 和 IE 10+</a></li>
<li><a href="https://github.com/fabien-d/alertify.js" target="_blank" rel="external">alertify.js</a></li>
<li><a href="https://github.com/MohammadYounes/AlertifyJS" target="_blank" rel="external">AlertifyJS</a></li>
<li><a href="https://github.com/t4t5/sweetalert" target="_blank" rel="external">SweetAlert</a></li>
<li><a href="https://github.com/HubSpot/messenger" target="_blank" rel="external">Messenger - 非常酷的弹框组件</a></li>
<li><a href="https://github.com/sciactive/pnotify" target="_blank" rel="external">PNotify</a></li>
<li><a href="https://github.com/jpillora/notifyjs" target="_blank" rel="external">Notify.js - A simple, versatile notification library</a></li>
<li><a href="https://github.com/VodkaBears/Remodal" target="_blank" rel="external">Remodal - 模态窗口插件</a></li>
</ul>
<h2 id="20-提示控件-Tooltips"><a href="#20-提示控件-Tooltips" class="headerlink" title="20. 提示控件(Tooltips)"></a>20. 提示控件(Tooltips)</h2><ul>
<li><a href="https://github.com/qTip2/qTip2" target="_blank" rel="external">qTip2 - Pretty powerful tooltips</a></li>
<li><a href="https://github.com/HubSpot/tooltip" target="_blank" rel="external">tooltip - CSS Tooltips</a></li>
<li><a href="https://github.com/iamceege/tooltipster" target="_blank" rel="external">tooltipster - A jQuery tooltip plugin</a></li>
<li><a href="https://github.com/jamescryer/grumble.js" target="_blank" rel="external">grumble.js - 气泡形状的提示（Tooltip）控件</a></li>
<li><a href="https://github.com/carlsednaoui/ouibounce" target="_blank" rel="external">Ouibounce - 离站提示控件</a></li>
</ul>
<h2 id="21-对话框-遮罩层-弹出层-lightbox"><a href="#21-对话框-遮罩层-弹出层-lightbox" class="headerlink" title="21. 对话框/遮罩层/弹出层(lightbox)"></a>21. 对话框/遮罩层/弹出层(lightbox)</h2><ul>
<li><a href="https://github.com/fancyapps/fancyBox" target="_blank" rel="external">fancyBox - Fancy jQuery lightbox</a></li>
<li><a href="https://github.com/krewenki/jquery-lightbox" target="_blank" rel="external">jquery-lightbox - The popular lightbox script, ported to jQuery</a></li>
<li><a href="https://github.com/jackmoore/colorbox" target="_blank" rel="external">Colorbox - a jQuery lightbox</a></li>
<li><a href="https://github.com/aui/artDialog" target="_blank" rel="external">artDialog - 经典的网页对话框组件</a></li>
<li><a href="https://github.com/codrops/DialogEffects" target="_blank" rel="external">DialogEffects</a></li>
<li><a href="https://github.com/malsup/blockui/" target="_blank" rel="external">jQuery blockUI - Page or element overlay</a></li>
</ul>
<h2 id="22-文档-表格-PDF"><a href="#22-文档-表格-PDF" class="headerlink" title="22. 文档/表格/PDF"></a>22. 文档/表格/PDF</h2><ul>
<li><a href="https://github.com/handsontable/handsontable" target="_blank" rel="external">handsontable - 在线可编辑excel表格</a></li>
<li><a href="https://github.com/rstaib/jquery-bootgrid" target="_blank" rel="external">jQuery Bootgrid - 用于ajax生成动态表格</a></li>
<li><a href="https://github.com/DataTables/DataTables" target="_blank" rel="external">DataTables - Table plug-in for jQuery</a></li>
<li><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="external">PDF.js - 一个 JavaScript 编写的 PDF 阅读器</a></li>
<li><a href="https://github.com/MrRio/jsPDF" target="_blank" rel="external">jsPDF - Generate PDF files in JavaScript</a></li>
<li><a href="https://github.com/okfn/recline/" target="_blank" rel="external">Recline.js - 灵活操作和展示数据</a></li>
<li><a href="https://github.com/alfajango/jquery-dynatable" target="_blank" rel="external">Dynatable - 交互式表格插件</a></li>
</ul>
<h2 id="23-目录树插件"><a href="#23-目录树插件" class="headerlink" title="23. 目录树插件"></a>23. 目录树插件</h2><ul>
<li><a href="https://github.com/zTree/zTree_v3" target="_blank" rel="external">zTree_v3 - jQuery Tree Plugin</a></li>
<li><a href="https://github.com/vakata/jstree" target="_blank" rel="external">jstree - jQuery Tree Plugin</a></li>
<li><a href="https://github.com/mar10/fancytree" target="_blank" rel="external">fancytree - Tree plugin for jQuery</a></li>
</ul>
<h2 id="24-Ajax模块"><a href="#24-Ajax模块" class="headerlink" title="24. Ajax模块"></a>24. Ajax模块</h2><ul>
<li><a href="https://github.com/github/fetch" target="_blank" rel="external">fetch - A window.fetch JavaScript polyfill</a></li>
<li><a href="https://github.com/ded/reqwest" target="_blank" rel="external">reqwest - browser asynchronous http requests</a></li>
<li><a href="https://github.com/argunner/minAjax.js/" target="_blank" rel="external">minAjax.js</a></li>
</ul>
<h2 id="25-音频-视频"><a href="#25-音频-视频" class="headerlink" title="25. 音频/视频"></a>25. 音频/视频</h2><ul>
<li><a href="http://01org.github.io/jWebAudio/" target="_blank" rel="external">jWebAudio</a></li>
<li><a href="https://github.com/happyworm/jPlayer" target="_blank" rel="external">jPlayer -  HTML5 Audio &amp; Video for jQuery</a></li>
<li><a href="https://github.com/videojs/video.js" target="_blank" rel="external">video.js - HTML5 &amp; Flash video player</a></li>
<li><a href="https://github.com/paypal/accessible-html5-video-player" target="_blank" rel="external">Accessible HTML5 Video Player - PayPal 开源的 HTML5 视频播放器</a></li>
<li><a href="https://github.com/clappr/clappr" target="_blank" rel="external">Clappr - 开源的Web视频播放器</a></li>
<li><a href="https://github.com/selz/plyr" target="_blank" rel="external">Plyr - 简单，灵活的 HTML5 媒体播放器</a></li>
<li><a href="https://github.com/davatron5000/FitVids.js" target="_blank" rel="external">FitVids.js - A lightweight, easy-to-use jQuery plugin for fluid width video embeds.</a></li>
<li><a href="https://github.com/dfcb/BigVideo.js" target="_blank" rel="external">BigVideo.js - The jQuery Plugin for Big Background Video</a></li>
<li><a href="https://github.com/bdougherty/BigScreen" target="_blank" rel="external">BigScreen - A simple library for using the JavaScript Full Screen API</a></li>
<li><a href="https://github.com/VodkaBears/Vide" target="_blank" rel="external">Vide - 视频背景</a></li>
<li><a href="https://github.com/captbaritone/winamp2-js" target="_blank" rel="external">winamp2-js</a></li>
<li><a href="https://github.com/jaysalvat/buzz" target="_blank" rel="external">Buzz - A Javascript HTML5 Audio library</a></li>
<li>[howler.js 是一个新的 JavaScript 库用于处理 Web 的音频，该库最初是为一个 HTML5 游戏引擎所开发，但也可用于其他的 Web 项目。] (<a href="https://github.com/goldfire/howler.js" target="_blank" rel="external">https://github.com/goldfire/howler.js</a>)</li>
</ul>
<h2 id="26-按钮"><a href="#26-按钮" class="headerlink" title="26. 按钮"></a>26. 按钮</h2><ul>
<li><a href="https://github.com/alexwolfe/Buttons" target="_blank" rel="external">Buttons - A CSS button library</a></li>
<li><a href="https://github.com/codrops/ButtonComponentMorph" target="_blank" rel="external">ButtonComponentMorph</a></li>
<li><a href="https://github.com/codrops/ProgressButtonStyles" target="_blank" rel="external">ProgressButtonStyles</a></li>
<li><a href="https://github.com/codrops/CreativeButtons" target="_blank" rel="external">CreativeButtons</a></li>
<li><a href="https://github.com/ubuwaits/css3-buttons" target="_blank" rel="external">CSS3 buttons</a></li>
<li><a href="https://github.com/timmywil/jquery.onoff" target="_blank" rel="external">jquery.onoff - Interactive, accessible toggle switches for the web.</a></li>
</ul>
<h2 id="27-富文本编辑器-Markdown编辑器-Markdown解析器"><a href="#27-富文本编辑器-Markdown编辑器-Markdown解析器" class="headerlink" title="27. 富文本编辑器/Markdown编辑器/Markdown解析器"></a>27. 富文本编辑器/Markdown编辑器/Markdown解析器</h2><ul>
<li><a href="https://github.com/mycolorway/simditor" target="_blank" rel="external">Simditor - 简单快速的富文本编辑器</a></li>
<li><a href="https://github.com/Integ/BachEditor" target="_blank" rel="external">BachEditor - 一个有情怀的编辑器</a></li>
<li><a href="http://neilj.github.io/Squire/" target="_blank" rel="external">Squire – 简洁的 HTML5 富文本编辑器</a></li>
<li><a href="https://github.com/tinymce/tinymce" target="_blank" rel="external">TinyMCE</a></li>
<li><a href="https://github.com/toopay/bootstrap-markdown" target="_blank" rel="external">bootstrap-markdown</a></li>
<li><a href="https://github.com/chjj/marked" target="_blank" rel="external">marked - markdown解析器</a></li>
<li><a href="https://github.com/tylingsoft/markdown-plus" target="_blank" rel="external">Markdown Plus</a></li>
<li><a href="https://github.com/pandao/editor.md" target="_blank" rel="external">Editor.md - 开源在线Markdown编辑器</a></li>
</ul>
<h2 id="28-内容提取-Readability"><a href="#28-内容提取-Readability" class="headerlink" title="28. 内容提取(Readability)"></a>28. 内容提取(Readability)</h2><ul>
<li><a href="https://code.google.com/p/arc90labs-readability/" target="_blank" rel="external">Readability</a></li>
<li><a href="https://github.com/marianoguerra/json.human.js" target="_blank" rel="external">json.human.js - Json Formatting for Human Beings</a></li>
</ul>
<h2 id="29-颜色-CSS-Colors-SVG"><a href="#29-颜色-CSS-Colors-SVG" class="headerlink" title="29. 颜色(CSS Colors)/SVG"></a>29. 颜色(CSS Colors)/SVG</h2><ul>
<li><a href="http://colours.neilorangepeel.com/" target="_blank" rel="external">CSS Colours</a></li>
<li><a href="http://www.svgeneration.com/" target="_blank" rel="external">SVGeneration</a></li>
<li><a href="https://github.com/dirkgroenen/SVGMagic" target="_blank" rel="external">SVGMagic - 自动的创建PNG来兼容不支持SVG的浏览器</a></li>
<li><a href="https://github.com/briangonzalez/jquery.adaptive-backgrounds.js" target="_blank" rel="external">Adaptive Backgrounds - 从图片抽取主要颜色和应用到父元素</a></li>
</ul>
<h2 id="30-选项卡-Tabs"><a href="#30-选项卡-Tabs" class="headerlink" title="30. 选项卡(Tabs)"></a>30. 选项卡(Tabs)</h2><ul>
<li><a href="https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion" target="_blank" rel="external">Easy Responsive Tabs to Accordion</a></li>
<li><a href="https://github.com/jellekralt/Responsive-Tabs" target="_blank" rel="external">Responsive-Tabs</a></li>
<li><a href="https://github.com/IonDen/ion.tabs" target="_blank" rel="external">ion.tabs - jQuery tabs plugin</a></li>
<li><a href="https://github.com/JangoSteve/jQuery-EasyTabs" target="_blank" rel="external">jQuery-EasyTabs</a></li>
</ul>
<h2 id="31-文本处理"><a href="#31-文本处理" class="headerlink" title="31. 文本处理"></a>31. 文本处理</h2><ul>
<li><a href="https://github.com/zeroclipboard/zeroclipboard" target="_blank" rel="external">ZeroClipboard - 文本复制插件</a></li>
<li><a href="https://github.com/lemonmade/bigfoot" target="_blank" rel="external">Bigfoot - 点击文章中的脚注弹窗显示</a></li>
<li><a href="https://github.com/openannotation/annotator" target="_blank" rel="external">Annotator - 文本注解插件，可以包括注释、标签、用户等</a></li>
<li><a href="https://github.com/micjamking/Succinct" target="_blank" rel="external">Succinct - 用作截断多行文本,后面添加省略号</a></li>
<li><a href="https://github.com/simplefocus/FlowType.JS" target="_blank" rel="external">Flowtype.js - 自动调整字体大小和行号</a></li>
<li><a href="https://github.com/peachananr/flat-shadow" target="_blank" rel="external">flat-shadow</a></li>
<li><a href="https://github.com/davatron5000/FitText.js" target="_blank" rel="external">FitText - A jQuery plugin for inflating web type</a></li>
<li><a href="http://cmsauve.com/projects/squishy/" target="_blank" rel="external">Squishy 是一个jQuery插件，它能自动调整文字，准确地对其各容器</a></li>
<li><a href="http://freqdec.github.io/slabText/" target="_blank" rel="external">slabText 一个jQuery插件，用于创建大的，大胆的和敏感的头条新闻。</a></li>
<li><a href="http://jschr.github.io/textillate/" target="_blank" rel="external">Textillate 做CSS3文字动画。</a></li>
<li><a href="http://baconforme.com/" target="_blank" rel="external">Bacon 是一个jQuery插件，它允许您环绕贝塞尔曲线文字或线条，它可以让您的文字沿贝塞尔曲线排列。</a></li>
<li><a href="http://circletype.labwire.ca/" target="_blank" rel="external">Circletype.js 是一个很小的（ 2.7kb ）的jQuery插件，可以让你的字体在一个圆圈内显示。</a></li>
<li><a href="http://www.jwf.us/projects/jQSlickWrap/" target="_blank" rel="external">jQSlickWrap 是一个jQuery插件，让您可以轻松而准确地环绕浮动图像里的内容文字。</a></li>
<li><a href="http://typebutter.com/" target="_blank" rel="external">TypeButter 使您能为您的字体设置透明度和字间距。</a></li>
</ul>
<h2 id="32-布局-Layout"><a href="#32-布局-Layout" class="headerlink" title="32. 布局(Layout)"></a>32. 布局(Layout)</h2><ul>
<li>分隔面板(Split Panel)<ul>
<li><a href="https://github.com/shagstrom/split-pane" target="_blank" rel="external">split-pane</a></li>
</ul>
</li>
</ul>
<h2 id="33-实用工具-其他插件"><a href="#33-实用工具-其他插件" class="headerlink" title="33. 实用工具/其他插件"></a>33. 实用工具/其他插件</h2><ul>
<li><a href="https://github.com/carhartl/jquery-cookie" target="_blank" rel="external">jquery-cookie</a></li>
<li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">FastClick - 处理移动端 click 事件 300 毫秒延迟</a></li>
<li><a href="https://github.com/caolan/async" target="_blank" rel="external">Async.js - 异步操作</a></li>
<li><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="external">html2canvas - 实现纯JS网页截图</a></li>
<li><a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="external">jquery.qrcode.js - 生成二维码的 jQuery 插件</a></li>
<li><a href="https://github.com/platform45/nakedpassword" target="_blank" rel="external">nakedpassword - 用脱衣女帮助检测密码强度</a></li>
<li><a href="https://github.com/fex-team/kityminder" target="_blank" rel="external">KityMinder - 脑图编辑工具</a></li>
<li><a href="https://github.com/patrickkunka/mixitup" target="_blank" rel="external">MixitUp - 动画过滤和排序</a></li>
<li><a href="https://github.com/peachananr/tip_cards" target="_blank" rel="external">JQuery Tip Cards - 创建卡片交互的cards布局</a></li>
<li><a href="https://github.com/dolox/fallback/" target="_blank" rel="external">Fallback.js - JavaScript library for dynamically loading CSS and JS files.</a></li>
<li><a href="https://github.com/swfobject/swfobject" target="_blank" rel="external">swfobject</a></li>
</ul>
<h2 id="34-sass-库"><a href="#34-sass-库" class="headerlink" title="34. sass 库"></a>34. sass 库</h2><ul>
<li><a href="http://lukyvj.github.io/family.scss/" target="_blank" rel="external">Family.scss - css3选择器简写框架,非常不错</a></li>
<li><a href="http://spacebase.space150.com/" target="_blank" rel="external">SpaceBase – 基于 Sass 的响应式 CSS 框架</a> - <a href="https://github.com/space150/spaceBase" target="_blank" rel="external">github</a></li>
<li><a href="http://breakpoint-sass.com/" target="_blank" rel="external">breakpoint-sass 媒体查询库</a></li>
<li><a href="http://include-media.com/" target="_blank" rel="external">@include-media diy媒体查询库</a></li>
<li><a href="https://github.com/paranoida/sass-mediaqueries" target="_blank" rel="external">sass-mediaqueries 媒体查询库-推荐</a> -<a href="http://paranoida.github.io/sass-mediaqueries/demo.html" target="_blank" rel="external">demo</a></li>
<li><a href="https://github.com/sass-mq/sass-mq" target="_blank" rel="external">sass-mq Media Queries with superpowers-em单位媒体查询库</a> </li>
</ul>
<h2 id="34-1-分页"><a href="#34-1-分页" class="headerlink" title="34.1 分页"></a>34.1 分页</h2><ul>
<li><a href="https://github.com/beneverard/jqPagination" target="_blank" rel="external">jqPagination 分页插件</a></li>
</ul>
<h2 id="35-未知分类"><a href="#35-未知分类" class="headerlink" title="35. 未知分类"></a>35. 未知分类</h2><ul>
<li><a href="http://maroslaw.github.io/rainyday.js/" target="_blank" rel="external">Rainyday.js - 实现雨滴效果</a></li>
<li><a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="external">Reveal.JS - 替代PPT,演示文稿。</a></li>
<li><a href="http://jnordberg.github.io/gif.js/" target="_blank" rel="external">Gif.JS 是一个能运行在你的浏览器中的JavaScript GIF编码器。</a></li>
<li><a href="http://madebymany.github.io/sir-trevor-js/" target="_blank" rel="external">Sir Trevor是一个会完全重绘网页内容的工具：直观的编辑网页内容而不用假定任何关于它是如何重绘的事。</a></li>
<li><a href="http://featurejs.com/" target="_blank" rel="external">feature.js 检测浏览器是否支持某属性</a></li>
<li><a href="http://mockjs.com/" target="_blank" rel="external">Mock.js 生成随机数据,拦截ajax</a></li>
<li><a href="http://tympanus.net/Development/BookPreview/" target="_blank" rel="external">BookBlock 翻书特效</a> - <a href="https://github.com/codrops/BookBlock" target="_blank" rel="external">github</a></li>
<li><a href="https://github.com/usablica/intro.js" target="_blank" rel="external">intro.js 引导用户页面</a></li>
<li><a href="http://una.im/CSSgram/" target="_blank" rel="external">CSS滤镜 CSSgram</a></li>
<li><a href="http://www.transformicons.com/" target="_blank" rel="external">Transformicons - CSS/SVG 元素模拟 图标/符号动画-过渡</a></li>
<li><a href="http://ilyashubin.github.io/FilterBlend/" target="_blank" rel="external">CSS 滤镜在线调试</a></li>
<li><a href="https://github.com/evanw/glfx.js" target="_blank" rel="external">glfx.js canvas图片处理滤镜</a></li>
<li><a href="http://riccardoscalco.github.io/crayon/" target="_blank" rel="external">Crayon.css CSS颜色变量名与16进制对应列表。</a></li>
<li><a href="http://sarasoueidan.com/tools/circulus/" target="_blank" rel="external">SVG圆形菜单生成器</a></li>
<li><a href="https://jakearchibald.github.io/svgomg/" target="_blank" rel="external">优化和配置SVGO的WEB应用</a></li>
<li><a href="http://katydecorah.com/css-ruler/" target="_blank" rel="external">CSS单位对比视图</a></li>
<li><a href="http://anthonydugois.com/svg-path-builder/" target="_blank" rel="external">使用GUI快速创建SVG path</a></li>
<li><a href="http://css2sass.herokuapp.com/" target="_blank" rel="external">把CSS代码转成SASS的应用</a></li>
<li><a href="http://resizr.co/" target="_blank" rel="external">resizr 测试  CSS media queries 的轻量级应用-需要线上地址,没有线上地址,可以搞个coding-git</a></li>
<li><a href="http://yanshuo.io/" target="_blank" rel="external">在线ppt</a></li>
<li><a href="http://web.flash2x.org/" target="_blank" rel="external">flash文件转 canvas - Flash2x Tool</a> <a href="http://www.annie2x.com/docs/" target="_blank" rel="external">http://www.annie2x.com/docs/</a></li>
<li><a href="https://github.com/DevExpress/testcafe" target="_blank" rel="external">testcafe 浏览器测试工具-类似(测试单元工具)</a><h2 id="36-Canvas库"><a href="#36-Canvas库" class="headerlink" title="36. Canvas库"></a>36. Canvas库</h2><ul>
<li><a href="https://github.com/caleb531/jcanvas" target="_blank" rel="external">jCanvas - 语法简单实现canvas的js 库</a></li>
<li><a href="http://www.createjs.cc/" target="_blank" rel="external">create.js </a> </li>
</ul>
</li>
</ul>
<hr>
<h2 id="前端参考集"><a href="#前端参考集" class="headerlink" title="前端参考集"></a>前端参考集</h2><ul>
<li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="external">frontend-guidelines - Some HTML, CSS and JS best practices.</a></li>
<li><a href="https://github.com/codrops" target="_blank" rel="external">Codrops - Useful resources</a></li>
<li><a href="http://isobar-idev.github.io/code-standards/" target="_blank" rel="external">Front-end Code Standards &amp; Best Practices</a></li>
<li><a href="https://github.com/dypsilon/frontend-dev-bookmarks" target="_blank" rel="external">frontend-dev-bookmarks</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb 的 JavaScript 编码规范</a></li>
<li><a href="http://nexts.github.io/Clusterize.js/" target="_blank" rel="external">Clusterize.js 可以优化你的大型数据表格的性能</a><br>还有一大波干货待整理…</li>
</ul>
<hr>
<p>欢迎分享你的好东西给我</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些前端开发的干货&quot;&gt;&lt;a href=&quot;#一些前端开发的干货&quot; class=&quot;headerlink&quot; title=&quot;一些前端开发的干货&quot;&gt;&lt;/a&gt;一些前端开发的干货&lt;/h1&gt;&lt;p&gt;@(前端乱炖)&lt;/p&gt;
&lt;p&gt;标签（空格分隔）： 资料&lt;/p&gt;
&lt;h3 id=&quot;出处
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://yoursite.com/2017/04/11/react/"/>
    <id>http://yoursite.com/2017/04/11/react/</id>
    <published>2017-04-11T05:13:19.000Z</published>
    <updated>2017-04-11T05:15:08.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><p>###React是什么？</p>
<ul>
<li>React是Facebook开源的一个用于构建用户界面的Javascript库，已经 应用于Facebook及旗下Instagram。</li>
<li>和庞大的AngularJS不同，React专注于MVC架构中的V，即视图。 这使得React很容易和开发者已有的开发栈进行融合。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-41b7a29860c2bf7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机</li>
</ul>
<p>###官网地址</p>
<ul>
<li><a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">英文网</a>：<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">http://facebook.github.io/react/docs/getting-started.html</a><blockquote>
<p>文档最新且更新快（推荐大家看这个）</p>
</blockquote>
</li>
</ul>
<p>*<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="external">中文网</a>：<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="external">http://reactjs.cn/react/docs/getting-started.html</a></p>
<p>###在线编辑工具<br>在线编辑工具，可以方便我们快速学习react基本语法<br><img src="./1483713761573.png" alt=""></p>
<p>###为什么使用 React？<br>我们创造 React 是为了解决一个问题：<strong>构建随着时间数据不断变化的大规模应用程序。</strong>为了达到这个目标，React 采用下面三个主要的思想。</p>
<ul>
<li><p><strong>简单</strong></p>
<blockquote>
<p>仅仅只要表达出你的应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</p>
</blockquote>
</li>
<li><p><strong>声明式 (Declarative)</strong></p>
<blockquote>
<p>数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。</p>
</blockquote>
</li>
<li><p><strong>构建可组合的组件 </strong></p>
<blockquote>
<p>React 都是关于构建可复用的组件。事实上，通过 React 你唯一要做的事情就是构建组件。得益于其良好的封装性，组件使代码复用、测试和关注分离（separation of concerns）更加简单。</p>
</blockquote>
</li>
</ul>
<p>更多原因 <a href="http://facebook.github.io/react/blog/2013/06/05/why-react.html" target="_blank" rel="external">http://facebook.github.io/react/blog/2013/06/05/why-react.html</a></p>
<h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><ul>
<li><a href="http://info.smartstudy.com/" target="_blank" rel="external">http://info.smartstudy.com/</a></li>
<li><a href="http://www.kongkonghu.com/choice" target="_blank" rel="external">http://www.kongkonghu.com/choice</a></li>
<li><a href="https://github.com/webpack/react-starter" target="_blank" rel="external">https://github.com/webpack/react-starter</a></li>
</ul>
<h3 id="入门视频"><a href="#入门视频" class="headerlink" title="入门视频"></a>入门视频</h3><ul>
<li><a href="https://www.youtube.com/watch?v=7eLqKgp0eeY" target="_blank" rel="external">https://www.youtube.com/watch?v=7eLqKgp0eeY</a></li>
<li><a href="https://www.youtube.com/watch?v=fZKaq623y38&amp;list=PLQDnxXqV213JJFtDaG0aE9vqvp6Wm7nBg" target="_blank" rel="external">https://www.youtube.com/watch?v=fZKaq623y38&amp;list=PLQDnxXqV213JJFtDaG0aE9vqvp6Wm7nBg</a></li>
<li><a href="https://www.youtube.com/watch?v=QQK5hpUuOuA&amp;list=PLUAEXpf1UDMkzPOiNJBrlqsUryn7n2cnK" target="_blank" rel="external">https://www.youtube.com/watch?v=QQK5hpUuOuA&amp;list=PLUAEXpf1UDMkzPOiNJBrlqsUryn7n2cnK</a></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><strong><a href="https://github.com/dingyiming/learn-Js-react/issues/1" target="_blank" rel="external">https://github.com/dingyiming/learn-Js-react/issues/1</a></strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React简介&quot;&gt;&lt;a href=&quot;#React简介&quot; class=&quot;headerlink&quot; title=&quot;React简介&quot;&gt;&lt;/a&gt;React简介&lt;/h1&gt;&lt;p&gt;###React是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React是Facebook开源的一个用于构建用
    
    </summary>
    
      <category term="前端主流框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
      <category term="react" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React的四个概念简单介绍</title>
    <link href="http://yoursite.com/2017/04/11/react-2/"/>
    <id>http://yoursite.com/2017/04/11/react-2/</id>
    <published>2017-04-11T04:01:16.000Z</published>
    <updated>2017-04-11T04:02:38.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React的四个概念简单介绍"><a href="#React的四个概念简单介绍" class="headerlink" title="React的四个概念简单介绍"></a>React的四个概念简单介绍</h1><p><strong>React主要有四个主要概念构成，下面分别来介绍一下：</strong></p>
<p>###Virtual DOM</p>
<ol>
<li>虚拟DOM是React的基石。</li>
</ol>
<ul>
<li>之所以引入虚拟DOM，一方面是性能的考虑。Web应用和网站不同，一个Web应用 中通常会在单页内有大量的DOM操作，而这些DOM操作很慢。</li>
<li>在React中，应用程序在虚拟DOM上操作，这让React有了优化的机会。简单说， React在每次需要渲染时，会先比较当前DOM内容和待渲染内容的差异， 然后再决定如何最优地更新DOM。这个过程被称为reconciliation。</li>
<li>除了性能的考虑，React引入虚拟DOM更重要的意义是提供了一种一致的开发方 式来开发服务端应用、Web应用和手机端应用：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-f4a4f89fb9057ad6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片2.png"></p>
<blockquote>
<p>因为有了虚拟DOM这一层，所以通过配备不同的渲染器，就可以将虚拟DOM的内容 渲染到不同的平台。而应用开发者，使用JavaScript就可以通吃各个平台了。相当棒的思路！</p>
</blockquote>
<ol>
<li>Virtual DOM速度快的说明<blockquote>
<p>在Web开发中，我们总需要将变化的数据实时反应到UI上，这时就需要对DOM进行操作。而复杂或频繁的DOM操作通常是性能瓶颈产生的原因（如何 进行高性能的复杂DOM操作通常是衡量一个前端开发人员技能的重要指标）。React为此引入了虚拟DOM（Virtual DOM）的机制：在浏览器端用Javascript实现了一套DOM API。基于React进行开发时所有的DOM构造都是通过虚拟DOM进行，每当数据变化时，React都会重新构建整个DOM树，然后React将当前 整个DOM树和上一次的DOM树进行对比，得到DOM结构的区别，然后仅仅将需要变化的部分进行实际的浏览器DOM更新。而且React能够批处理虚拟 DOM的刷新，在一个事件循环（Event Loop）内的两次数据变化会被合并，例如你连续的先将节点内容从A变成B，然后又从B变成A，React会认为UI不发生任何变化，而如果通过手动控 制，这种逻辑通常是极其复杂的。尽管每一次都需要构造完整的虚拟DOM树，但是因为<strong>虚拟DOM是内存数据，性能是极高的，而对实际DOM进行操作的仅仅是 Diff部分，因而能达到提高性能的目的。</strong>这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的DOM元素，而只需要 关心在任意一个数据状态下，整个界面是如何Render的。<a href="http://blog.csdn.net/yczz/article/details/49585313" target="_blank" rel="external">详情查看</a></p>
</blockquote>
</li>
</ol>
<h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><ul>
<li>组件化概念<blockquote>
<ol>
<li>虚拟DOM(virtual-dom)不仅带来了简单的UI开发逻辑，同时也带来了组件化开发的思想，所谓组件，即封装起来的具有独立功能的UI部 件。React推荐以组件的方式去重新思考UI构成，将UI上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件， 最终完成整体UI的构建。例如，Facebook的instagram.com整站都采用了React来开发，整个页面就是一个大的组件，其中包含了嵌套 的大量其它组件，大家有兴趣可以看下它背后的代码。</li>
<li>如果说MVC的思想让你做到视图-数据-控制器的分离，那么组件化的思考方式则是带来了UI功能模块之间的分离。我们通过一个典型的Blog评论界面来看MVC和组件化开发思路的区别</li>
<li>对于MVC开发模式来说，开发者将三者定义成不同的类，实现了表现，数据，控制的分离。开发者更多的是从技术的角度来对UI进行拆分，实现松耦合。</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<p>对于React而言，则完全是一个新的思路，开发者从功能的角度出发，将<strong>UI分成不同的组件，每个组件都独立封装。</strong><br>在React中，你按照界面模块自然划分的方式来组织和编写你的代码，对于评论界面而言，整个UI是一个通过小组件构成的大组件，每个组件只关心自己部分的逻辑，彼此独立。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-2a9c9141d3171550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-91e028ba04406cc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>组件化开发特性<br>React认为一个组件应该具有如下特征：</li>
</ul>
<ol>
<li><strong>可组合（Composeable）</strong>：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件；</li>
<li><strong>可重用（Reusable）</strong>：每个组件都是具有独立功能的，它可以被使用在多个UI场景；</li>
<li><strong>可维护（Maintainable）</strong>：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护；</li>
<li><strong>可测试（Testable）</strong>：因为每个组件都是独立的，那么对于各个组件分别测试显然要比对于整个UI进行测试容易的多。</li>
</ol>
<ul>
<li>组件定义<br>在React中定义一个组件也是相当的容易，组件就是一个 实现预定义接口的JavaScript类：</li>
</ul>
<ol>
<li>组件渲染<blockquote>
<p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">  );</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>而这个方法， 必须而且只能返回一个有效的React元素。这意味着，如果你的组件是由多个元素构成的，那么你必须在外边包一个顶层 元素，然后返回这个顶层元素。比如我们创建一个布局组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> React.createElement(</div><div class="line">        <span class="string">"div"</span>,<span class="literal">null</span>,</div><div class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"header"</span>),</div><div class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"content"</span>),</div><div class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"footer"</span>)</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>ES5方式定义组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">displayName</span>: <span class="string">"HelloMessage"</span>,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> React.createElement(</div><div class="line">      <span class="string">"div"</span>,</div><div class="line">      <span class="literal">null</span>,</div><div class="line">      <span class="string">"Hello "</span>,</div><div class="line">      <span class="keyword">this</span>.props.name</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  &#125;);</div><div class="line">ReactDOM.render(React.createElement(HelloMessage, &#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;), mountNode);</div></pre></td></tr></table></figure>
</li>
<li><p>Jsx中定义组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
</li>
<li><p>ES6中定义组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./Hello.css'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'./Hello.scss'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="comment">// 内联样式</span></div><div class="line"><span class="keyword">let</span> style=&#123;</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'blue'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="string">'es6'</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Hello world&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">image</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>5 注意事项</p>
<p>（1）你的React组件名称的首字母应当大写，关于大小写的差异你会在后面发现。<br>（2）你应该会注意到div元素的样式类是用 className而不是class声明的，这是因为class 是JavaScript的保留字，渲染后，真实的DOM还会是：</p>
<blockquote>
<p><code>&lt;div class=&quot;ez-led&quot;&gt;Hello, React!&lt;/div&gt;</code></p>
</blockquote>
<h3 id="Jsx语法"><a href="#Jsx语法" class="headerlink" title="Jsx语法"></a>Jsx语法</h3><ul>
<li><p>什么是jsx</p>
<blockquote>
<p>在用React写组件的时候，通常会用到JSX语法，粗看上去，像是在Javascript代码里直接写起了XML标签，实质上这只是一个语法糖，每一个 XML标签都会被JSX转换工具转换成纯Javascript代码，当然你想直接使用纯Javascript代码写也是可以的，只是<strong>利用JSX，组件的结 构和组件之间的关系看上去更加清晰</strong></p>
</blockquote>
</li>
<li><p>Jsx语法使用<br>HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">  &#123;</div><div class="line">    names.map(function (name) &#123;</div><div class="line">      return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。</strong></p>
<hr>
<p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr = [</div><div class="line">  &lt;h1&gt;Hello world!&lt;/h1&gt;,</div><div class="line">  &lt;h2&gt;React is awesome&lt;/h2&gt;,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>上面代码的arr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板，运行结果如下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-98d4bc48bbd0b369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Data-Flow（单向数据流）"><a href="#Data-Flow（单向数据流）" class="headerlink" title="Data Flow（单向数据流）"></a>Data Flow（单向数据流）</h3><ul>
<li>传统的mvc</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-604b4c06682a5d3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>到了 Flux 当中, 除了名字改变了, 重要的是大量的 Model 归到了 Store, View 也统一了,从而得到了所谓单向的数据流, 就是 Model 和 View 之间关系非常清晰了。这样需要人为管理的状态就一下少了很多, 结果体现在开发应用的效率当中:</p>
<ul>
<li>Flux </li>
</ul>
<ol>
<li>详细学习地址：<a href="https://hulufei.gitbooks.io/react-tutorial/content/flux.html" target="_blank" rel="external">https://hulufei.gitbooks.io/react-tutorial/content/flux.html</a></li>
<li>React 标榜自己是 MVC 里面 V 的部分，那么 Flux 就相当于添加 M 和 C 的部分，Flux 是 Facebook 使用的一套前端应用的架构模式。</li>
<li>一个 Flux 应用主要包含四个部分：<pre><code>1. dispatcher 处理动作分发，维护 Store 之间的依赖关系
2. stores  数据和逻辑部分
3. views  React 组件，这一层可以看作 controller-views，作为视图同时响应用户交互
4. actions  提供给 dispatcher 传递数据给 store
</code></pre></li>
<li>单向数据流<br>先来了解一下 Flux 的核心“单向数据流“怎么运作的：<br>Action -&gt; Dispatcher -&gt; Store -&gt; View<br>更多时候 View 会通过用户交互触发 Action，所以一个简单完整的数据流类似这样：</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-7d7e819922568908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>整个流程如下：</p>
<ol>
<li>首先要有 action，通过定义一些 action creator 方法根据需要创建 Action 提供给 dispatcher</li>
<li>View 层通过用户交互（比如 onClick）会触发 Action</li>
<li>Dispatcher 会分发触发的 Action 给所有注册的 Store 的回调函数</li>
<li>Store 回调函数根据接收的 Action 更新自身数据之后会触发一个 change 事件通知 View 数据更改了</li>
<li>View 会监听这个 change 事件，拿到对应的新数据并调用 setState 更新组件 UI<br>所有的状态都由 Store 来维护，通过 Action 传递数据，构成了如上所述的单向数据流循环，所以应用中的各部分分工就相当明确，高度解耦了。<br>这种单向数据流使得整个系统都是透明可预测的。<br>###Redux<br>Redux官方中文文档：<a href="http://camsong.github.io/redux-in-chinese/index.html" target="_blank" rel="external">http://camsong.github.io/redux-in-chinese/index.html</a></li>
</ol>
<p>Reflux：<a href="https://segmentfault.com/a/1190000002793786?utm_source=tuicool" target="_blank" rel="external">https://segmentfault.com/a/1190000002793786?utm_source=tuicool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React的四个概念简单介绍&quot;&gt;&lt;a href=&quot;#React的四个概念简单介绍&quot; class=&quot;headerlink&quot; title=&quot;React的四个概念简单介绍&quot;&gt;&lt;/a&gt;React的四个概念简单介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;React主要有四个主要概念
    
    </summary>
    
      <category term="前端主流框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
      <category term="react" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React快速开始+Recat主要知识内容</title>
    <link href="http://yoursite.com/2017/04/11/react-1/"/>
    <id>http://yoursite.com/2017/04/11/react-1/</id>
    <published>2017-04-11T03:59:49.000Z</published>
    <updated>2017-04-11T05:10:09.713Z</updated>
    
    <content type="html"><![CDATA[<p>#React快速开始+Recat主要知识内容</p>
<p>##快速开始</p>
<p>###创建项目文件夹</p>
<blockquote>
<p><code>npm  init // 初始化npm配置文件</code></p>
</blockquote>
<h3 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h3><p><strong>在项目根目录下打开命令窗口下载react和react-dom依赖</strong></p>
<blockquote>
<p><code>npm install  react  react-dom --save</code></p>
<h3 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h3></blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-2509804071f79ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>看官网英文官网的：<a href="http://facebook.github.io/react/index.html" target="_blank" rel="external">http://facebook.github.io/react/index.html</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Var React=<span class="built_in">require</span>(‘react’);</div><div class="line">Var ReactDOM=<span class="built_in">require</span>(‘react-dom’);</div><div class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure></p>
<h3 id="代码编译方式（语法转换）"><a href="#代码编译方式（语法转换）" class="headerlink" title="代码编译方式（语法转换）"></a>代码编译方式（语法转换）</h3><p>因为现在都是使用jsx和es6，所以我们需要对js代码进行编译。<br><strong>编译转换有分为浏览器中转换和离线转换，但是基本上公司不会用在浏览器中引入转换js转换，所以我们只介绍离线转换</strong></p>
<ul>
<li>react-tools转换<br>这是react自己提供的，而且是老版本的，因为中文官网还是老版本的api，所以介绍的是这种方式。<blockquote>
<p><code>npm install -g react-tools // 首先安装依赖</code></p>
</blockquote>
</li>
</ul>
<hr>
<blockquote>
<p><code>jsx  --watch  src/  build/  // 用命令进行转换，有兴趣的大家自己看一下jsx -h</code></p>
</blockquote>
<p>参考地址：<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="external">http://reactjs.cn/react/docs/getting-started.html</a></p>
<ul>
<li>babel转换<br>英文官网的文档比较新，已经推荐使用babel来进行转换<br>1.下载依赖<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> --global babel-cli   // 安装babel</div><div class="line">npm <span class="keyword">install</span> babel-preset-react  -dev-save// 安装babel转换jsx的包</div><div class="line">npm <span class="keyword">install</span> babel-preset-es2015 -dev-save// 安装babel转化ES6的包</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意:加了-dev之后，运行npm install不会下载开发依赖，你需要运行</strong></p>
<blockquote>
<p><code>npm install –dev  //从github上下载之后运行这句才能下载开发依赖</code></p>
</blockquote>
<ol>
<li><p>运行命令进行编译</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel --presets react src --watch --out-dir build  // 更多命令可运行babel –h查看或者官网</div></pre></td></tr></table></figure>
</li>
<li><p>将编译之后的js文件在index.html文件中引入</p>
</li>
</ol>
<hr>
<ul>
<li><p>Gulp-react<br><a href="https://github.com/sindresorhus/gulp-react" target="_blank" rel="external">https://github.com/sindresorhus/gulp-react</a></p>
</li>
<li><p>开发工具</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-71d8b08a7d971b06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-e6287f242a0f6bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-562020cd62f569b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###语法版本说明<br>从最新的版本上来看，未来都是要用es6语法</p>
<p>##Recat主要知识内容</p>
<h3 id="视图相关概念"><a href="#视图相关概念" class="headerlink" title="视图相关概念"></a>视图相关概念</h3><ul>
<li>Props（属性，就是element上的attrs，换个名字property，变成复数，即props）</li>
<li>State（写过view组件的基本都会知道，按钮有三态，Normal，Highlight，Selected，包括extjs，jquery里的大部分ui框架都是有状态的。）</li>
<li>Event（其实还应该算一个就是dom事件，上面的例子就把onChange的handler编译后的handleChange方法，这要感谢jsx）<br>了解了上面这些，就可以写代码了，因为</li>
<li>属性，解决了view的定义问题，即语义描述</li>
<li>状态，是view的有穷状态机，根据状态决定组件ui和行为</li>
<li>事件，是view里元素的行为<br>有穷状态机：<a href="http://baike.baidu.com/view/115336.htm" target="_blank" rel="external">http://baike.baidu.com/view/115336.htm</a></li>
</ul>
<h3 id="jsx语法详解"><a href="#jsx语法详解" class="headerlink" title="jsx语法详解"></a>jsx语法详解</h3><ul>
<li><p>HTML 转义（了解）</p>
<ol>
<li><p>React 会将所有要显示到 DOM 的字符串转义，防止 XSS。所以如果 JSX 中含有转义后的实体字符比如 © (©) 最后显示到 DOM 中不会正确显示，因为 React 自动把 © 中的特殊字符转义了。有几种解决办法：</p>
<ul>
<li>直接使用 UTF-8 字符 ©</li>
<li>使用对应字符的 Unicode 编码</li>
<li>使用数组组装 <code>&lt;div&gt;{[&#39;cc &#39;, &lt;span&gt;©&lt;/span&gt;, &#39; 2015&#39;]}&lt;/div&gt;</code></li>
<li><p>直接插入原始的 HTML<br><code>&lt;div dangerouslySetInnerHTML=</code>{<code>`{</code>__html: ‘cc © 2015’}} /&gt;`</p>
<p><a href="http://reactjs.cn/react/tips/dangerously-set-inner-html.html" target="_blank" rel="external">dangerouslySetInnerHTML参考文档</a></p>
</li>
</ul>
</li>
<li><p>自定义 HTML 属性（了解）<br> <strong>如果在 JSX 中使用的属性不存在于 HTML 的规范中，这个属性会被忽略。如果要使用自定义属性，可以用 data- 前缀。文档估计有问题</strong><br>可访问性属性的前缀 aria- 也是支持的。<br>与dom的区别文档：<a href="http://reactjs.cn/react/docs/dom-differences.html" target="_blank" rel="external">http://reactjs.cn/react/docs/dom-differences.html</a></p>
</li>
<li><p>支持的标签和属性<br> <strong>如果你要使用的某些标签或属性不在这些支持列表里面就可能被 React 忽略</strong>，必须要使用的话可以提 issue，或者用前面提到的 dangerouslySetInnerHTML。<br>支持列表：<a href="http://reactjs.cn/react/docs/tags-and-attributes.html" target="_blank" rel="external">http://reactjs.cn/react/docs/tags-and-attributes.html</a></p>
<ul>
<li>并不是所有的html标签和属性都能在jsx语法中使用</li>
<li>基本上你能用到的标签的属性，jsx语法都支持</li>
<li><p>有些特殊的属性需要注意，必须class属性要变为className属性</p>
<p><strong>所有的属性都是驼峰命名的，class 属性和 for 属性分别改为 className 和 htmlFor，来符合 DOM API 规范。</strong></p>
</li>
</ul>
</li>
<li><p>属性扩散<br>有时候你需要给组件设置多个属性，你不想一个个写下这些属性，或者有时候你甚至不知道这些属性的名称，这时候 spread attributes 的功能就很有用了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	  <span class="keyword">var</span> props = &#123;&#125;;</div><div class="line">props.foo = x;</div><div class="line">props.bar = y;</div><div class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-7bf3439bcaa0bfa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> props = &#123; <span class="attr">foo</span>: <span class="string">'default'</span> &#125;;</div><div class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">foo</span>=<span class="string">&#123;</span>'<span class="attr">override</span>'&#125; /&gt;</span>;</span></div><div class="line">console.log(component.props.foo); // 'override'</div></pre></td></tr></table></figure>
<ol>
<li>自闭合标签<br> <strong>如果只有一个组件，就用单闭合标签形式，如果有多个组件嵌套就用双闭合标签形式</strong><br><a href="http://reactjs.cn/react/tips/self-closing-tag.html" target="_blank" rel="external">http://reactjs.cn/react/tips/self-closing-tag.html</a></li>
<li>注释<br>在 JSX 里使用注释也很简单，就是沿用 JavaScript，唯一要注意的是在一个组件的子元素位置使用注释要用 {} 包起来<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content = (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Nav</span>&gt;</span></span></div><div class="line">      &#123;/* child comment, put &#123;&#125; around */&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">Person</span></span></div><div class="line">        /* <span class="attr">multi</span></div><div class="line">           <span class="attr">line</span></div><div class="line">           <span class="attr">comment</span> */</div><div class="line">        <span class="attr">name</span>=<span class="string">&#123;window.isLoggedIn</span> ? <span class="attr">window.name</span> <span class="attr">:</span> ''&#125; // <span class="attr">end</span> <span class="attr">of</span> <span class="attr">line</span> <span class="attr">comment</span></div><div class="line">      /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###React的API</p>
<ul>
<li><a href="http://facebook.github.io/react/docs/top-level-api.html" target="_blank" rel="external"><strong>顶层API</strong>I</a></li>
<li><a href="http://facebook.github.io/react/docs/component-api.html" target="_blank" rel="external"><strong>组件API</strong></a><h3 id="组件的生命周期（特别重要）"><a href="#组件的生命周期（特别重要）" class="headerlink" title="组件的生命周期（特别重要）"></a>组件的生命周期（特别重要）</h3>组件的生命周期，另外的名字是状态回调，和上面讲的状态的唯一差别，上面的状态是它里面的元素，而组件的生命周期是它自己<br><strong><a href="https://hulufei.gitbooks.io/react-tutorial/content/component-lifecycle.html" target="_blank" rel="external">https://hulufei.gitbooks.io/react-tutorial/content/component-lifecycle.html</a></strong></li>
<li>组件的生命周期分成三个状态：<ol>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ol>
</li>
<li><p>处理函数:<br>  React 为每个状态都提供了两种处理函数，will函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>
<ol>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li><p>componentWillUnmount()</p>
<p>此外，React 还提供两种特殊状态的处理函数。</p>
</li>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ol>
</li>
<li>函数调用顺序图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-2d288f0335cc8e70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>从上图中我们可以看出来，组件再初始化一次之后就不会再运行上图运行中文字以上的方法，反而里面会有事件监听，从而执行shouleComponentUpdate事件。</strong></p>
<ul>
<li>代码使用<ul>
<li>ES5:</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</div><div class="line">    getInitialState() &#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">liked</span>: <span class="literal">false</span> &#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.liked);</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">image</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports=Hello;</div></pre></td></tr></table></figure>
<ul>
<li>ES6</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="string">'es6'</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>Hello world&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">image</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>参考文章<br>  生命周期详细介绍：<ul>
<li><a href="http://www.cnblogs.com/CHONGCHONG2008/p/5099483.html" target="_blank" rel="external">http://www.cnblogs.com/CHONGCHONG2008/p/5099483.html</a></li>
<li><a href="http://pinggod.com/2015/React-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/" target="_blank" rel="external">http://pinggod.com/2015/React-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</a></li>
<li><a href="http://reactjs.cn/react/docs/component-specs.html" target="_blank" rel="external">http://reactjs.cn/react/docs/component-specs.html</a></li>
</ul>
</li>
<li>在ES6中用ES5的写法会报错</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-043b33953f4173b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="ES5-ES6最新写法对照表"><a href="#ES5-ES6最新写法对照表" class="headerlink" title="ES5/ES6最新写法对照表"></a>ES5/ES6最新写法对照表</h3><p>React的：<br><a href="http://www.tuicool.com/articles/equ2my" target="_blank" rel="external">http://www.tuicool.com/articles/equ2my</a></p>
<p>ReactNative的<br><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2" target="_blank" rel="external">http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2</a></p>
<p>###事件处理</p>
<ul>
<li><p>使用<br>onClick这种进行驼峰命名ES5和ES6的写法不一样，在ES6中要用bind方法绑定this(具体可参照ES5和ES6写法对照表)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleClick(e) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span></div><div class="line">                You &#123;text&#125; this. Click to toggle.</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>参数传递<br>ES6写法：给事件处理函数传递额外参数的方式：<code>bind(this, arg1, arg2, ...)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this,</span> <span class="attr">param1</span>,<span class="attr">param2</span>,<span class="attr">param3</span>)&#125;&gt;</span>;</span></div><div class="line">&#125;,</div><div class="line">handleClick: function(param1,param2,param3, event) &#123;</div><div class="line">    // handle click</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>React 支持的事件列表<br><a href="http://reactjs.cn/react/docs/events.html" target="_blank" rel="external">http://reactjs.cn/react/docs/events.html</a></p>
</li>
</ul>
<h3 id="Dom操作"><a href="#Dom操作" class="headerlink" title="Dom操作"></a>Dom操作</h3><ul>
<li>findDOMNode()方法（了解）<br>   首先我们要了解 <code>ReactDOM.render</code>组件返回的是对组件的引用也就是组件实例（对于无状态状态组件来说返回 null），注意 JSX 返回的不是组件实例，它只是一个 <code>ReactElement</code> 对象。<br>当组件加载到页面上之后（mounted），你都可以通过<code>react-dom</code>提供的<code>findDOMNode()</code>方法拿到组件对应的 DOM 元素。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Inside Component class</span></div><div class="line">componentDidMound() &#123;</div><div class="line">  <span class="keyword">const</span> el = findDOMNode(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><code>findDOMNode() 不能用在无状态组件上。</code></strong></p>
<ul>
<li>方法二：refs属性<br>另外一种方式就是通过在要引用的 DOM 元素上面设置一个 ref 属性指定一个名称，然后通过 <code>this.refs.name</code> 来访问对应的 DOM 元素。<br><strong>如果 ref 是设置在原生 HTML 元素上，它拿到的就是 DOM 元素，如果设置在自定义组件上，它拿到的就是组件实例，这时候就需要通过 <code>findDOMNode</code> 来拿到组件的 DOM 元素。</strong><br>因为无状态组件没有实例，所以 ref 不能设置在无状态组件上，一般来说这没什么问题，因为无状态组件没有实例方法，不需要 ref 去拿实例调用相关的方法，但是如果想要拿无状态组件的 DOM 元素的时候，就需要用一个状态组件封装一层，然后通过<code>ref 和 findDOMNode</code>去获取。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInputFocus</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state=&#123; <span class="attr">userInput</span>: <span class="string">''</span> &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleChange(e) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.theInput.value);</div><div class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>: e.target.value &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clearAndFocusInput() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>: <span class="string">''</span> &#125;, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.refs.theInput.focus();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clearAndFocusInput.bind(this)&#125;</span>&gt;</span></div><div class="line">                    Click to Focus and Reset</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span></span></div><div class="line">                    <span class="attr">ref</span>=<span class="string">"theInput"</span></div><div class="line">                    <span class="attr">value</span>=<span class="string">&#123;this.state.userInput&#125;</span></div><div class="line">                    <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange.bind(this)&#125;</span></div><div class="line">                /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyInputFocus.defaultProps=&#123;</div><div class="line">    autoPlay:false,</div><div class="line">    maxLoops:10,</div><div class="line">&#125;</div><div class="line">MyInputFocus.propTypes = &#123;</div><div class="line">    autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">    maxLoops: React.PropTypes.number.isRequired,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意事项<ul>
<li>你可以使用 ref 到的组件定义的任何公共方法，比如 this.refs.myTypeahead.reset()</li>
<li>Refs 是访问到组件内部 DOM 节点唯一可靠的方法</li>
<li>Refs 会自动销毁对子组件的引用（当子组件删除时）</li>
<li>不要在 render 或者 render 之前访问 refs</li>
<li>不要滥用 refs，比如只是用它来按照传统的方式操作界面 UI：找到 DOM -&gt; 更新 DOM<br>###组件的 DOM 事件监听<br>这篇文章是讲如何给 DOM 元素绑定 React 未提供的事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Box = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">windowWidth</span>: <span class="built_in">window</span>.innerWidth&#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">handleResize</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">windowWidth</span>: <span class="built_in">window</span>.innerWidth&#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Current window width: &#123;this.state.windowWidth&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Box</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><a href="http://reactjs.cn/react/tips/dom-event-listeners.html" target="_blank" rel="external">http://reactjs.cn/react/tips/dom-event-listeners.html</a></p>
<ol>
<li>注意添加dom事件的位置</li>
<li>在组件退出的时候，取消监听事件</li>
</ol>
<p>###数据获取<br><a href="http://facebook.github.io/react/tips/initial-ajax.html" target="_blank" rel="external">http://facebook.github.io/react/tips/initial-ajax.html</a></p>
<p>###表单<br>表单不同于其他 HTML 元素，因为它要响应用户的交互，显示不同的状态，所以在 React 里面会有点特殊。</p>
<ul>
<li>状态属性<br>  表单元素有这么几种属于状态的属性：<ol>
<li><code>value</code>，对应<code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 所有</li>
<li><code>checked</code>，对应类型为<code>checkbox</code> 和 radio 的<code>&lt;input&gt;</code> 所有</li>
<li><code>selected</code>，对应 <code>&lt;option&gt;</code> 所有</li>
</ol>
</li>
</ul>
<p>在 HTML 中 <code>&lt;textarea&gt;</code> 的值可以由子节点（文本）赋值，但是在 React 中，要用 value 来设置。<br>表单元素包含以上任意一种状态属性都支持 onChange 事件监听状态值的更改。<br>针对这些状态属性不同的处理策略，表单元素在 React 里面有两种表现形式。</p>
<ul>
<li>受控组件<br>对于设置了上面提到的对应“状态属性“值的表单元素就是受控表单组件，比如</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span>;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个受控的表单组件，<strong>它所有状态属性更改涉及 UI 的变更都由 React 来控制（状态属性绑定 UI）。比如上面代码里的<code>&lt;input&gt;</code>输入框，用户输入内容，用户输入的内容不会显示（输入框总是显示状态属性 value 的值 hello）</strong>，这有点颠覆我们的认知了，所以说这是受控组件，不是原来默认的表单元素了。<br>如果你希望输入的内容反馈到输入框，就要用 onChange 事件改变状态属性 value 的值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'hello'</span>&#125;;</div><div class="line">&#125;,</div><div class="line"><span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">&#125;,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span>;</span></div><div class="line">&#125;</div><div class="line">//使用这种模式非常容易实现类似对用户输入的验证，或者对用户交互做额外的处理，比如截断最多输入140个字符：</div><div class="line">handleChange: function(event) &#123;</div><div class="line">    this.setState(&#123;value: event.target.value.substr(0, 140)&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>非受控属性<br><strong>和受控组件相对，如果表单元素没有设置自己的“状态属性”，或者属性值设置为 null，这时候就是非受控组件。</strong><br>它的表现就符合普通的表单元素，正常响应用户的操作。<br>同样，你也可以绑定 onChange 事件处理交互。<br><strong>如果你想要给“状态属性”设置默认值，就要用 React 提供的特殊属性 defaultValue，对于 checked 会有 defaultChecked，<code>&lt;option&gt;</code> 也是使用 defaultValue。</strong></li>
<li>为什么要有受控组件<br>引入受控组件不是说它有什么好处，而是因为 React 的 UI 渲染机制，对于表单元素不得不引入这一特殊的处理方式。<br>在浏览器 DOM 里面是有区分 <code>attribute</code> 和<code>property</code> 的。<code>attribute</code> 是在 HTML 里指定的属性，而每个 HTML 元素在 JS 对应是一个 DOM 节点对象，这个对象拥有的属性就是 <code>property</code>（可以在 <code>console</code> 里展开一个 DOM 节点对象看一下，<code>HTML attributes</code> 只是对应其中的一部分属性），<code>attribute</code> 对应的 <code>property</code> 会从 <code>attribute</code> 拿到初始值，有些会有相同的名称，但是有些名称会不一样，比如 <code>attribute class</code> 对应的 <code>property</code> 就是 <code>className</code>。（详细解释：<code>.prop</code>，<code>.prop()</code>vs <code>.attr()</code>）<br>回到 React 里的 <code>&lt;input&gt;</code> 输入框，当用户输入内容的时候，输入框的 <code>value property</code>会改变，但是 <code>value attribute</code> 依然会是 HTML 上指定的值<code>（attribute 要用 setAttribute 去更改）</code>。<br>React 组件必须呈现这个组件的状态视图，这个视图 HTML 是由 render 生成，所以对于<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span>;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在任意时刻，这个视图总是返回一个显示 hello 的输入框。</p>
<ul>
<li><code>&lt;select&gt;</code>的处理<br>在 HTML 中 <code>&lt;select&gt;</code> 标签指定选中项都是通过对应 <option> 的 selected 属性来做的，但是在 React 修改成统一使用 value。<br><strong>所以没有一个 selected 的状态属性。</strong></option></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select value="B"&gt;</div><div class="line">    &lt;option value="A"&gt;Apple&lt;/option&gt;</div><div class="line">    &lt;option value="B"&gt;Banana&lt;/option&gt;</div><div class="line">    &lt;option value="C"&gt;Cranberry&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>你可以通过传递一个数组指定多个选中项：<code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code></p>
<p>###参数传递的判断<br><strong><a href="http://facebook.github.io/react/docs/transferring-props.html" target="_blank" rel="external">http://facebook.github.io/react/docs/transferring-props.html</a></strong></p>
<p>###组合组件<br>使用组件的目的就是通过构建模块化的组件，相互组合组件最后组装成一个复杂的应用。<br>在 React 组件中要包含其他组件作为子组件，只需要把组件当作一个 DOM 元素引入就可以了。</p>
<p><a href="http://reactjs.cn/react/docs/multiple-components.html" target="_blank" rel="external">http://reactjs.cn/react/docs/multiple-components.html</a></p>
<ul>
<li>循环插入子元素<br>如果组件中包含通过循环插入的子元素，为了保证重新渲染 UI 的时候能够正确显示这些子元素，每个元素都需要通过一个特殊的 key 属性指定一个唯一值。为了内部 diff 的效率。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TodoList = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> createItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.props.items.map(createItem)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.export=TodoList</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>当 React 校正带有 key 的子级时，它会确保它们被重新排序（而不是破坏）或者删除（而不是重用）。 <strong>务必 把 key 添加到子级数组里组件本身上</strong>，而不是每个子级内部最外层 HTML 上。</li>
<li>也可以传递 object 来做有 key 的子级。object 的 key 会被当作每个组件的 key。但是一定要牢记 JavaScript 并不总是保证属性的顺序会被保留。实际情况下浏览器一般会保留属性的顺序，除了 使用 32位无符号数字做为 key 的属性。数字型属性会按大小排序并且排在其它属性前面。一旦发生这种情况，React 渲染组件的顺序就是混乱。可能在 key 前面加一个字符串前缀来避免：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> items = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.props.results.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">      <span class="comment">// 如果 result.id 看起来是一个数字（比如短哈希），那么</span></div><div class="line">      <span class="comment">// 对象字面量的顺序就得不到保证。这种情况下，需要添加前缀</span></div><div class="line">      <span class="comment">// 来确保 key 是字符串。</span></div><div class="line">      items[<span class="string">'result-'</span> + result.id] = <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;result.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line">        &#123;items&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>子级<br>组件标签里面包含的子元素会通过父元素的<code>props.children</code> 传递进来。<br>HTML 元素会作为 React 组件对象、JS 表达式结果是一个文字节点，都会存入 Parent 组件的 <code>props.children</code>。<br><code>props.children</code> 通常是一个组件对象的数组，但是当只有一个子元素的时候，<code>props.children</code>将是这个唯一的子元素，而不是数组了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> NotesList = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></div><div class="line">      &#123;</div><div class="line">        React.Children.map(this.props.children, function (child) &#123;</div><div class="line">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.body</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码的 NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取，运行结果如下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-2570cb0262e72f61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里需要注意， <code>this.props.children</code>的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 <code>this.props.children</code> 的时候要小心。<br>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code>。我们可以用 React.Children.map 来遍历子节点，而不用担心<code>this.props.children</code> 的数据类型是 undefined 还是 object。更多的 <code>React.Children</code>的方法，请参考官方文档。</p>
<p>###propsType<br><a href="http://www.reactjs.cn/react/docs/reusable-components.html" target="_blank" rel="external">http://www.reactjs.cn/react/docs/reusable-components.html</a></p>
<p>###Context<br><a href="http://facebook.github.io/react/docs/context.html" target="_blank" rel="external">http://facebook.github.io/react/docs/context.html</a></p>
<p>###动画<br><a href="http://facebook.github.io/react/docs/animation.html" target="_blank" rel="external">http://facebook.github.io/react/docs/animation.html</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/46778723" target="_blank" rel="external">http://blog.csdn.net/lihongxun945/article/details/46778723</a><br><a href="https://zhuanlan.zhihu.com/p/20419592" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/20419592</a></p>
<p>###获取react常用插件的网址<br><a href="https://js.coach/react/react-infinite" target="_blank" rel="external">https://js.coach/react/react-infinite</a><br><a href="https://react.parts/native" target="_blank" rel="external">https://react.parts/native</a></p>
<p>####diff算法<br><a href="http://blog.csdn.net/lihongxun945/article/details/46640503" target="_blank" rel="external">http://blog.csdn.net/lihongxun945/article/details/46640503</a><br><a href="http://reactjs.cn/react/docs/reconciliation.html" target="_blank" rel="external">http://reactjs.cn/react/docs/reconciliation.html</a><br><a href="http://blog.csdn.net/yczz/article/details/49585283" target="_blank" rel="external">http://blog.csdn.net/yczz/article/details/49585283</a><br><a href="http://blog.csdn.net/yczz/article/details/49886061" target="_blank" rel="external">http://blog.csdn.net/yczz/article/details/49886061</a></p>
<p>###Web Components<br><a href="http://www.oschina.net/p/polymer" target="_blank" rel="external">http://www.oschina.net/p/polymer</a><br><a href="http://facebook.github.io/react/docs/webcomponents.html" target="_blank" rel="external">http://facebook.github.io/react/docs/webcomponents.html</a></p>
<p>####服务器渲染<br><a href="http://zhuanlan.zhihu.com/p/20669111?" target="_blank" rel="external">http://zhuanlan.zhihu.com/p/20669111?</a>from=groupmessage&amp;isappinstalled=0</p>
<p>###组件间通信</p>
<ul>
<li>非父子组件间的通信<br>使用全局事件 Pub/Sub 模式，在 componentDidMount 里面订阅事件，在 componentWillUnmount 里面取消订阅，当收到事件触发的时候调用 setState 更新 UI。<br>这种模式在复杂的系统里面可能会变得难以维护，所以看个人权衡是否将组件封装到大的组件，甚至整个页面或者应用就封装到一个组件。<br>一般来说，对于比较复杂的应用，推荐使用类似 Flux 这种单项数据流架构，参见Data Flow。Flux和redux</li>
<li><p>数据流Flux<br>Github地址：<a href="https://github.com/facebook/flux" target="_blank" rel="external">https://github.com/facebook/flux</a></p>
<p>  <strong>React   redux  react-redux   react-router     webpack+gulp  ES6  babel</strong><br>  <strong>Mocha+chai  node</strong><br>   <strong>React native  Flex  fetch  原生  找插件</strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#React快速开始+Recat主要知识内容&lt;/p&gt;
&lt;p&gt;##快速开始&lt;/p&gt;
&lt;p&gt;###创建项目文件夹&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm  init // 初始化npm配置文件&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=
    
    </summary>
    
      <category term="前端主流框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
      <category term="react" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>angular常见问题解答</title>
    <link href="http://yoursite.com/2017/04/11/angular-bug/"/>
    <id>http://yoursite.com/2017/04/11/angular-bug/</id>
    <published>2017-04-11T03:55:15.000Z</published>
    <updated>2017-04-11T05:07:51.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular常见问题解答"><a href="#angular常见问题解答" class="headerlink" title="angular常见问题解答"></a>angular常见问题解答</h1><hr>
<ol>
<li><p>angularjs 是mvc还是mvvm框架</p>
<ul>
<li><p><strong>首先阐述下你对mvc和mvvm的理解</strong></p>
<blockquote>
<p>首先为什么我们会需要MVC？因为随着代码规模越来越大，切分职责是大势所趋，还有为了后期维护方便，修改一块功能不影响其他功能。还有为了复用，因为很多逻辑是一样的。而MVC只是手段，终极目标是模块化和复用。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<ul>
<li><p><strong>mvvm的优点</strong></p>
<ul>
<li><p>低耦合：View可以独立于Model变化和修改，同一个ViewModel可以被多个View复用；并且可以做到View和Model的变化互不影响；</p>
</li>
<li><p>可重用性：可以把一些视图的逻辑放在ViewModel，让多个View复用；</p>
</li>
<li><p>独立开发：开发人员可以专注与业务逻辑和数据的开发（ViewModemvvmdi计人员可以专注于UI(View)的设计；</p>
</li>
<li><p>可测试性：清晰的View分层，使得针对表现层业务逻辑的测试更容易，更简单。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>在angular中MVVM模式主要分为四部分：</strong></p>
<pre><code>*    View：它专注于界面的显示和渲染，在angular中则是包含一堆声明式Directive的视图模板。
*    ViewModel：它是View和Model的粘合体，负责View和Model的交互和协作，它负责给View提供显示的数据，以及提供了View中Command事件操作Model的途径；在angular中$scope对象充当了这个ViewModel的角色
*    Model：它是与应用程序的业务逻辑相关的数据的封装载体，它是业务领域的对象，Model并不关心会被如何显示或操作，所以模型也不会包含任何界面显示相关的逻辑。在web页面中，大部分Model都是来自Ajax的服务端返回数据或者是全局的配置对象；而angular中的service则是封装和处理这些与Model相关的业务逻辑的场所，这类的业务服务是可以被多个Controller或者其他service复用的领域服务。
*    Controller：这并不是MVVM模式的核心元素，但它负责ViewModel对象的初始化，它将组合一个或者多个service来获取业务领域Model放在ViewModel对象上，使得应用界面在启动加载的时候达到一种可用的状态。
</code></pre></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-0316d3f61152f855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>mvc的界面和逻辑关联紧密，数据直接从数据库读取。mvvm的界面与viewmode是松耦合，界面数据从viewmodel中获取。所以angularjs更倾向于mvvm</p>
<hr>
<ul>
<li>angularjs中$scope，controller，directive，sevice在mvvm中充当什么角色</li>
</ul>
<p>如果你不知道，第一题的分析以及很明确，仔细再仔细的看一遍</p>
<hr>
<ul>
<li>在使用angularjs项目开发中 你使用过那些第三方的插件<br>AngularUi  ui-router oclazyload等等  附上一篇文章仔细去看看 <a href="https://segmentfault.com/a/1190000003858219" target="_blank" rel="external">https://segmentfault.com/a/1190000003858219</a></li>
</ul>
<hr>
<ul>
<li>在angular项目中你如何控制静态资源的合理加载<br>第三题提到了oclazyload这个插件，很好的一个懒加载静态资源的第三方插件</li>
</ul>
<hr>
<ul>
<li>再写controlloer逻辑的时候 你需要注意什么？<ul>
<li>简化代码（这个是所有开发人员都要具备的）</li>
<li>坚决不能操作dom节点 这个时候可能会问 为什么不能啊<br>你的回答是：DOM操作只能出现在指令（directive）中。最不应该出现的位置就是服务（service）中。Angular倡导以测试驱动开发，在service或者controller中出现了DOM操作，那么也就意味着的测试是无法通过的。当然，这只是一点，重要的是使用Angular的其中一个好处是啥，那就是双向数据绑定，这样就能专注于处理业务逻辑，无需关系一堆堆的DOM操作。如果在Angular的代码中还到处充斥着各种DOM操作，那为什么不直接使用jquery去开发呢。</li>
</ul>
</li>
</ul>
<p>测试驱动开发是什么呢？普及一下：<br>测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统软件开发流程的新型的开发方法。它要求在编写某个功能的代码之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。</p>
<hr>
<ul>
<li>AngularJS的数据双向绑定是怎么实现的？<br>1、每个双向绑定的元素都有一个watcher<br>2、在某些事件发生的时候，调用digest脏数据检测。<br>这些事件有：表单元素内容变化、Ajax请求响应、点击按钮执行的函数等。<br>3、脏数据检测会检测rootscope下所有被watcher的元素。<br>$digest函数就是脏数据监测<br>又附上一篇原理性的文章 <a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md</a></li>
</ul>
<hr>
<ul>
<li>controller之间怎么通讯<ul>
<li>event<br>这里可以有两种方式，一种是$scope.$emit，然后通过监听$rootScope的事件获取参数；另一种是$rootScope.$broadcast，通过监听$scope的事件获取参数。<br>这两种方法在最新版本的Angular中已经没有性能区别了，主要就是事件发送的方向不同，可以按实际情况选择。</li>
<li>service<br>可以创建一个专用的事件Service，也可以按照业务逻辑切分，将数据存储在相应的Service</li>
<li>$rootScope<br>这个方法可能会比较dirty一点，胜在方便，也就是把数据存在$rootScope中，这样各个子$scope都可以调用，不过需要注意一下生命周期</li>
<li>直接使用$scope.$$nextSibling及类似的属性<br>类似的还有$scope.$parent。这个方法的缺点就更多了，官方不推荐使用任何$$开头的属性，既增加了耦合，又需要处理异步的问题，而且scope的顺序也不是固定的。不推荐<br>另外就是通过本地存储、全局变量或者现代浏览器的postMessage来传递参数了，除非特殊情况，请避免这类方式。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>自定义指令的几个参数<br>说几个常用的如：<br>restrict:指令在dom中的声明形式 E（元素）A（属性）C（类名）M（注释）<br>template：两种形式，一种HTML文本；一个可以接受两个参数的函数，tElemetn和tAttrs，并返回一个代表模板的字符串。模板字符串必须存在一个根DOM元素<br>templateUrl:两种形式，一种代表外部HTML文件路径的字符串；一个可以接受两个参数的函数，参数为tElement和tAttrs，并返回一个外部HTML文件路径的字符串<br>compile (对象或函数)：compile 选项可以返回一个对象或函数。如果设置了 compile 函数,说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作,在这个函数中进行诸如添加和删除节点等DOM操作是安全的。本质上,当我们设置了 link 选项,实际上是创建了一个 postLink() 链接函数,以便 compile() 函数可以定义链接函数。<br>然后又是传送门：<a href="http://www.cnblogs.com/mliudong/p/4180680.html" target="_blank" rel="external">http://www.cnblogs.com/mliudong/p/4180680.html</a><br>compile和link的区别：<br>编译的时候，compile转换dom，碰到绑定监听器的地方就先存着，有几个存几个，到最后汇总成一个link函数，一并执行，提升了性能。</li>
</ul>
<hr>
<ul>
<li>angular中的$http<br>$http 是 AngularJS 中的一个核心服务，用于读取远程服务器的数据。<br>我们可以使用内置的$http服务直接同外部进行通信。$http服务只是简单的封装了浏览器原生的XMLHttpRequest对象<br>1、链式调用<br>$http服务是只能接受一个参数的函数，这个参数是一个对象，包含了用来生成HTTP请求的<br>配置内容。这个函数返回一个promise对象，具有success和error两个方法。<br>2、返回一个promise对象<br>3、快捷的get请求<br>4、响应对象<br>传送门：<a href="https://github.com/facebook/flux" target="_blank" rel="external">https://github.com/facebook/flux</a></li>
</ul>
<hr>
<ul>
<li>angular和jquery的区别<br>angular是基于数据驱动，所以angular适合做数据操作比较繁琐的项目（这里可以再提一下单页面应用，如果你不会福利又来了 <a href="http://www.zhihu.com/question/20792064）" target="_blank" rel="external">http://www.zhihu.com/question/20792064）</a><br>jquery是基于dom驱动，jquery适合做dom操作多的项目</li>
</ul>
<hr>
<ul>
<li>对angular中的form表单了解多少<br>Angular对input元素的type进行了扩展，一共提供了以下10种类型：<br>text<br>number<br>url<br>email<br>radio<br>checkbox<br>hidden<br>button<br>submit<br>reset<br>Angular为表单内置了4中CSS样式。<br>ng-valid 校验合法状态<br>ng-invalid 校验非法状态<br>ng-pristine 如果要使用原生的form，需要设置这个值<br>ng-dirty     表单处于脏数据状态<br>Angular在对表单进行自动校验的时候会校验Model上的属性，如果不设置ng-model，则Angular无法知道myForm.$invalid这个值是否为真。<br>校验的一下内容<br>required 表示是否输入内容<br>ng-maxlength 最大长度<br>ng-minlength 最小长度<br>例子：传送门<a href="https://github.com/18500047564/clutter" target="_blank" rel="external">https://github.com/18500047564/clutter</a></li>
</ul>
<hr>
<ul>
<li>ng-show/ng-hide 与 ng-if 的区别？<br>我们都知道ng-show/ng-hide实际上是通过 display 来进行隐藏和显示的。而ng-if实际上控制dom节点的增删除来实现的。因此如果我们是根据不同的条件来进行dom节点的加载确认的话，那么ng-if的性能好过ng-show.</li>
</ul>
<hr>
<ul>
<li>解释下什么是 $rootScrope 以及和 $scope 的区别？<br>$rootScrope是所有$scope的父对象</li>
</ul>
<hr>
<ul>
<li>表达式 <code>{</code>{yourModel<code>}</code>}<code>是如何工作的？
它依赖于 $interpolation服务，在初始化页面html后，它会找到这些表达式，并且进行标记，于是每遇见一个</code>{<code>{</code> <code>}</code> <code>}</code> ，则会设置一个 $watch 。而 $interpolation 会返回一个带有上下文参数的函数，最后该函数执行，则算是表达式 $parse 到那个作用域上。</li>
</ul>
<hr>
<ul>
<li>fliter是什么你了解的有多少？实现一个自定义fliter<br>ng 内置的 filter 有九种：<br>date（日期）<br>currency（货币）<br>limitTo（限制数组或字符串长度）<br>orderBy（排序）<br>lowercase（小写）<br>uppercase（大写）<br>number（格式化数字，加上千位分隔符，并接收参数限定小数点位数）<br>filter（处理一个数组，过滤出含有某个子串的元素）<br>json（格式化 json 对象）<br>filter 有两种使用方法，<br>一种是直接在页面里：<br><strong><code>&lt;p&gt;</code>{<code>{</code>now | date : ‘yyyy-MM-dd’<code>}</code>}<code>`&lt;/p&gt;</code></strong><br>另一种是在 js 里面用：<br>$filter(‘过滤器名称’)(需要过滤的对象, 参数1, 参数2,…)<br>$filter(‘date’)(now, ‘yyyy-MM-dd hh:mm:ss’);<br>自定义一个去重数组的:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'unique'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> n = [];</div><div class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">           <span class="keyword">if</span>(!obj[arr[i]])&#123;</div><div class="line">            n.push(arr[i])</div><div class="line">            obj[arr[i]] = <span class="number">1</span>;</div><div class="line">           &#125; </div><div class="line">        &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular常见问题解答&quot;&gt;&lt;a href=&quot;#angular常见问题解答&quot; class=&quot;headerlink&quot; title=&quot;angular常见问题解答&quot;&gt;&lt;/a&gt;angular常见问题解答&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;angularjs 是m
    
    </summary>
    
      <category term="前端主流框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angular" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6/angular/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>五分钟学会Seajs</title>
    <link href="http://yoursite.com/2017/04/11/seajs/"/>
    <id>http://yoursite.com/2017/04/11/seajs/</id>
    <published>2017-04-11T03:49:17.000Z</published>
    <updated>2017-04-11T03:53:46.948Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1：引入包文件 sea.js</li>
<li>2: 启动seajs.use(‘./main’) 设置启动入口模块 参数可以不需要.js后缀</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>06_seajs基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 1：引包 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../seajs-3.0.0/dist/sea.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;script src="./one.js" charset="utf-8"&gt;&lt;/script&gt;</span></div><div class="line">  &lt;script src="./two.js" charset="utf-8"&gt;&lt;/script&gt; 不适用seajs加载的方式，需要注意文件顺序--&gt;</div><div class="line">  <span class="comment">&lt;!-- 2: 启动seajs 并且指定入口模块 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    seajs.use(<span class="string">'./one'</span>);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>3: 声明一个模块：模块在define();内部包裹</li>
<li>4: 需要向外暴露值，通过module.exports来返回</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">      <span class="comment">// 如果这个模块需要别的模块的返回值</span></div><div class="line">      <span class="keyword">var</span> aaa =<span class="built_in">require</span>(<span class="string">'模块路径ID'</span>);<span class="comment">//返回对方模块内部的module.exports</span></div><div class="line">      <span class="built_in">module</span>.exports = 返回值;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>在模块内部，声明的变量，都是模块的作用域<pre><code>+ 在CMD中，一个模块就是一个文件，外部无法访问
+ 如果需要访问，通过module.exports 向外暴露
</code></pre></li>
</ul>
<h4 id="define参数的三种方式"><a href="#define参数的三种方式" class="headerlink" title="define参数的三种方式"></a>define参数的三种方式</h4><ul>
<li><p>字符串 define(‘123’)</p>
<blockquote>
<p>define(‘我是字符串’);</p>
</blockquote>
</li>
<li><p>对象define({name:’aaa’})</p>
<blockquote>
<p>define({name:’gaga’,age:19});</p>
</blockquote>
</li>
<li><p>函数define(function(require,exports,module){})</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">  <span class="comment">// module.exports = &#123;nane:'jack'&#125;</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'abcl'</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="exports和module-exports的小问题"><a href="#exports和module-exports的小问题" class="headerlink" title="exports和module.exports的小问题"></a>exports和module.exports的小问题</h4><ul>
<li>模块被加载的时期，这两个对象都指向一块内存，该内存初始值是一个空对象</li>
<li>不管任意改变哪个对象的内存指向 （对象=值），最终仍然返回module.exports对象</li>
<li><p>如果module.exports 和exports让你头晕脑胀，建议使用module.exports</p>
</li>
<li><p><strong>框架的使用尽量遵守其规则,基于define内部解析对象，根据参数的数据来，顺序不要改变</strong></p>
</li>
<li>module.exports 用来赋值并暴露，exports用来给暴露的对象挂载属性，就是一个简写<h4 id="Use的2种方法"><a href="#Use的2种方法" class="headerlink" title="Use的2种方法"></a>Use的2种方法</h4></li>
<li><p>use函数是一个异步函数</p>
<ul>
<li>异步：不阻塞后续代码执行</li>
<li>同步：当前函数不执行完毕，下一行代码无法执行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">seajs.use(<span class="string">'./a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">    code....</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 着重掌握</span></div><div class="line">  seajs.use([<span class="string">'./a'</span>,<span class="string">'./b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    code..</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>seajs.use 第二个参数是一个函数，内部参数与传入的加载模块的返回值的顺序一致</p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="http://upload-images.jianshu.io/upload_images/4071931-90c555599427ed14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 1.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-3bd1fce1865f145a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 2.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-40750964b2359ec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 3.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-f9c28a3f102986b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 4.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-055972a5dc5c0511.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 5.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-a6655f4b716eadc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 6.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-979612060f8ddeff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 7.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-322dc147f8820040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 8.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-278a02434091f7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图像 9.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1：引入包文件 sea.js&lt;/li&gt;
&lt;li&gt;2: 启动seajs.use(‘./main’) 设置启动入口模块 参数可以不需要.js后缀&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="前端模块化加载框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="模块化规范" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Seajs" scheme="http://yoursite.com/tags/Seajs/"/>
    
  </entry>
  
  <entry>
    <title>requireJS学习</title>
    <link href="http://yoursite.com/2017/04/11/requirejs/"/>
    <id>http://yoursite.com/2017/04/11/requirejs/</id>
    <published>2017-04-11T03:49:09.000Z</published>
    <updated>2017-04-11T04:06:31.881Z</updated>
    
    <content type="html"><![CDATA[<h4 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h4><ul>
<li>requireJS也可以用Seajs写法,不建议，因为思想冲突，代码风格不再是加载前置了</li>
<li>1: 引包</li>
<li>2：开启程序入口模块 requirejs([‘./a’,’./b’],function(a,b){code..})<ul>
<li>seajs.use([‘./a’,’./b’],function(a,b){code..});</li>
</ul>
</li>
<li>3: 定义一个模块 define(依赖项数组,返回值的回调);<ul>
<li>define(function(require,exports,module){code..});</li>
</ul>
</li>
<li>4: 向外暴露 return<ul>
<li>seajs: module.exports || exports 挂载属性</li>
</ul>
</li>
<li>5: 需要拿到别的模块的暴露值，参考第三点中的返回值回调  <ul>
<li>seajs：require<h4 id="seajs和-requireJS比较"><a href="#seajs和-requireJS比较" class="headerlink" title="seajs和 requireJS比较"></a>seajs和 requireJS比较</h4></li>
</ul>
</li>
<li>requireJS加载前置，声明前置 （需要什么提前准备好）<ul>
<li>首先加载文件前,检查该文件是否有依赖，如果有依赖，先加载依赖模块，再加载本身模块.</li>
</ul>
</li>
<li>seajs加载：懒加载，延迟加载，加载滞后（什么时候，什么时候加载）</li>
<li>玉伯：seajs:明显没有bug —— requirejs: 没有明显的bug</li>
<li><p>我个人认为requireJS可能用得比较多一点</p>
<ul>
<li>requirejs加载机制,思想更贴合前端开发引入标签的模式</li>
<li>加载的机制，在web端，可能因为网络或者卡顿，不太会出现出来一部分，另一部分白的</li>
<li>懒加载思想就是节省资源</li>
</ul>
<p>####图解seajs和 requireJS</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4071931-ee3ab4fe5e6c4285.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="requirejs和seajs.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;requireJS&quot;&gt;&lt;a href=&quot;#requireJS&quot; class=&quot;headerlink&quot; title=&quot;requireJS&quot;&gt;&lt;/a&gt;requireJS&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;requireJS也可以用Seajs写法,不建议，因为思想冲突，代码风格
    
    </summary>
    
      <category term="前端模块化加载框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="模块化规范" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Requirejs" scheme="http://yoursite.com/tags/Requirejs/"/>
    
  </entry>
  
  <entry>
    <title>模块化规范</title>
    <link href="http://yoursite.com/2017/04/11/commonjs/"/>
    <id>http://yoursite.com/2017/04/11/commonjs/</id>
    <published>2017-04-11T03:44:46.000Z</published>
    <updated>2017-04-11T03:53:08.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器端规范"><a href="#服务器端规范" class="headerlink" title="服务器端规范"></a>服务器端规范</h3><ul>
<li><a href="http://www.commonjs.org/" target="_blank" rel="external">CommonJS</a><ul>
<li><a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a><blockquote>
<p>CommonJS 定义JavaScript语言后端规范 </p>
<ul>
<li>后端语言应该具备什么能力？ 接收请求、处理底层数据、 模块化定义（Module)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="浏览器端规范"><a href="#浏览器端规范" class="headerlink" title="浏览器端规范"></a>浏览器端规范</h3><ul>
<li><p><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="external">AMD</a> </p>
<ul>
<li><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a><blockquote>
<p>AMD 也是一种规范的名称，推崇异步加载，遵循依赖前置(加载前置)(提前加载) </p>
</blockquote>
</li>
</ul>
</li>
<li><p><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="external">CMD</a></p>
<ul>
<li><a href="http://seajs.org/" target="_blank" rel="external">Seajs</a> <blockquote>
<p>CMD是一种规范 推崇同步加载 遵循加载滞后，按需加载,懒加载(需要的时候加载)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;服务器端规范&quot;&gt;&lt;a href=&quot;#服务器端规范&quot; class=&quot;headerlink&quot; title=&quot;服务器端规范&quot;&gt;&lt;/a&gt;服务器端规范&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.commonjs.org/&quot; target=&quot;_blan
    
    </summary>
    
      <category term="前端模块化加载框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="模块化规范" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript 数组</title>
    <link href="http://yoursite.com/2017/04/10/0901-javascript/"/>
    <id>http://yoursite.com/2017/04/10/0901-javascript/</id>
    <published>2017-04-10T14:51:38.000Z</published>
    <updated>2017-04-17T09:42:37.834Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=2526613&auto=1&height=66"></iframe></p>
<h1 id="javascript-数组"><a href="#javascript-数组" class="headerlink" title="javascript 数组"></a>javascript 数组</h1><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><h3 id="一维数组创建语法："><a href="#一维数组创建语法：" class="headerlink" title="一维数组创建语法："></a>一维数组创建语法：</h3><blockquote>
<p><code>var 数组名称 = new Array([size]);</code><br>[size] 表示数组中可存放的元素总数或值([ 该选项可选可不选])</p>
</blockquote>
<ul>
<li><p>方法1</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruit = <span class="keyword">new</span> <span class="built_in">Array</span>( );</div><div class="line">fruit[<span class="number">0</span>]=“apple”</div><div class="line">fruit[<span class="number">1</span>]=“orange”</div><div class="line">fruit[<span class="number">2</span>]=“peach”</div><div class="line">fruit[<span class="number">3</span>]=<span class="string">"bananer"</span></div></pre></td></tr></table></figure>
</li>
<li><p>方法2</p>
<blockquote>
<p><code>var fruit= new Array(&quot;apple&quot;, &quot;orange&quot;, &quot; peach&quot;,&quot;bananer&quot;) //指定数组长度，数组元素赋值</code></p>
</blockquote>
</li>
<li><p>方法3</p>
<ul>
<li>指定长度小于数组元素实际数量</li>
<li>制定长度大于数组元素实际数量</li>
</ul>
</li>
<li><p>方法四：推荐使用</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr4 = [<span class="literal">false</span>,<span class="string">"aaa"</span>,<span class="number">123</span>];</div><div class="line">alert(arr4);<span class="comment">//false,aaa,123</span></div></pre></td></tr></table></figure>
<ol>
<li>数组内可以存放任意类型的数据</li>
<li>数组元素丌赋值，则为undefined</li>
<li>打印数组时，如果某个元素没有赋值，则为“”</li>
<li>访问数组范围以外的元素时，丌会出现越界异常，为undefined</li>
<li>定义的数组大小，依然可以添加更多的元素</li>
</ol>
</li>
</ul>
<h3 id="二维数组创建语法："><a href="#二维数组创建语法：" class="headerlink" title="二维数组创建语法："></a>二维数组创建语法：</h3><ul>
<li><p>语法1: <code>var arr = new Array([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;],[&#39;d&#39;,&#39;e&#39;]);
arr[0]</code>返回第一个一维数组，arr[0][0]返回第一个一维数组的第一个元素‘ a’</p>
<blockquote>
<p>二维数组可以理解为一个存放数据内容为一维数组的一维数组</p>
</blockquote>
</li>
<li><p>二维数组创建语法：</p>
<ul>
<li><p>语法二:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">0</span>]= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">0</span>][<span class="number">0</span>]= “a”;</div><div class="line">arr[<span class="number">0</span>][<span class="number">1</span>]= “b”;</div><div class="line">arr[<span class="number">0</span>][<span class="number">2</span>]= “c”;</div><div class="line">arr[<span class="number">1</span>]= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">1</span>][<span class="number">0</span>]= “c”;</div><div class="line">arr[<span class="number">1</span>][<span class="number">1</span>]= “d”;</div></pre></td></tr></table></figure>
<blockquote>
<p>javascript的数组丌需要设定长度，会自己迚行扩展</p>
<h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2></blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="访问数组代码："><a href="#访问数组代码：" class="headerlink" title="访问数组代码："></a>访问数组代码：</h3><ul>
<li>一维数组：<code>document.write(fruit[0]); 输出：apple</code></li>
<li>二维数组：<code>document.write(arr[0][0]); 输出：a</code></li>
</ul>
<h3 id="修改已有数组中的值"><a href="#修改已有数组中的值" class="headerlink" title="修改已有数组中的值"></a>修改已有数组中的值</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fruit[<span class="number">0</span>]=“pear”</div><div class="line"><span class="built_in">document</span>.write(fruit[<span class="number">0</span>])</div><div class="line">输出：pear</div></pre></td></tr></table></figure>
</code></pre><h3 id="数组的便利"><a href="#数组的便利" class="headerlink" title="数组的便利"></a>数组的便利</h3><blockquote>
<p>利用for语句访问数组中的元素值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">13.5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">alert(arr[i])</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line">方法二：</div><div class="line"><span class="keyword">var</span> x</div><div class="line"><span class="keyword">var</span> mycars = <span class="keyword">new</span> <span class="built_in">Array</span>()</div><div class="line">mycars[<span class="number">0</span>] = <span class="string">"Saab"</span></div><div class="line">mycars[<span class="number">1</span>] = <span class="string">"Volvo"</span></div><div class="line">mycars[<span class="number">2</span>] = <span class="string">"BMW"</span></div><div class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> mycars)&#123;</div><div class="line"><span class="built_in">document</span>.write(mycars[x])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数组的常用属性和方法"><a href="#数组的常用属性和方法" class="headerlink" title="数组的常用属性和方法"></a>数组的常用属性和方法</h2><ul>
<li>数组常用属性—length属性 数组属性<code>length</code><ul>
<li>设置或返回数组中元素的数目，该属性的值始终从数值上大于所属数组的任何一个索引号</li>
</ul>
</li>
<li>修改数组的length对数组索引的影响<ul>
<li>手动增大length属性丌影响索引</li>
<li>手动减少length属性会截掉多余的索引</li>
</ul>
</li>
<li>修改索引对length属性的影响<ul>
<li>增大数组最大索引号会增大length属性</li>
</ul>
</li>
<li>删除索引号最大的索引属性丌会影响length属性</li>
</ul>
<p>###数组常用的方法： 数组方法</p>
<ul>
<li>join( ) ：把数组的所有元素放入一个字符串，通过一个的分隔符<br>迚行分隔</li>
<li>pop( )：删除并返回数组的最后一个元素</li>
<li>push( )：向数组的末尾添加一个戒更多元素，并返回新的长度</li>
<li>shift()：删除并返回数组的第一个元素</li>
<li>unshift()：向数组的开头添加一个戒更多元素，并返回新的长度数组的常用属性和方法</li>
<li>reverse()：颠倒数组中元素的顺序</li>
<li>sort( )：对数组的元素迚行排序</li>
<li>concat():连接两个戒更多的数组，并返回结果。</li>
<li>slice():从某个已有的数组返回选定的元素</li>
<li>splice():删除元素，并向数组添加新元素<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><blockquote>
<p>数组分为一维数组和多维数组二维数组及以上的都称为多维数组，上面我们讲解了一维数组，下面我们例举一下多维数组，以二维数组为例。</p>
</blockquote>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">[<span class="string">"Name0"</span>, <span class="string">"Age0"</span>, <span class="string">"Address0"</span>],</div><div class="line">[<span class="string">"Name1"</span>, <span class="string">"Age1"</span>, <span class="string">"Address1"</span>],</div><div class="line">[<span class="string">"Name2"</span>, <span class="string">"Age2"</span>, <span class="string">"Address2"</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li><p>二维数组的创建：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Var personnel = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">Personnel[<span class="number">0</span>]= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">Personnel[<span class="number">0</span>][<span class="number">0</span>]= “Name0”;</div><div class="line">Personnel[<span class="number">0</span>][<span class="number">1</span>]= “Age0”;</div><div class="line">Personnel[<span class="number">0</span>][<span class="number">2</span>]= “Address0”;</div><div class="line">Personnel[<span class="number">1</span>]= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">Personnel[<span class="number">1</span>][<span class="number">0</span>]= “Name1”;</div><div class="line">Personnel[<span class="number">1</span>][<span class="number">1</span>]= “Age1”;</div><div class="line">Personnel[<span class="number">1</span>][<span class="number">2</span>]= “Address1”;</div></pre></td></tr></table></figure>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法2</span></div><div class="line">Var aa=<span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//定义一维数组</span></div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</div><div class="line">&#123;</div><div class="line">	aa[i]=<span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//将每一个子元素又定义为数组</span></div><div class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;=<span class="number">10</span>;n++)</div><div class="line">&#123;</div><div class="line">aa[i][n]=i+n; <span class="comment">//此时aa[i][n]可以看作是一个二维数 组</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>还可创建三维数组，四维五维甚至一百维的，但是维数越多越复杂，超过二维的很少使用，下面演示了一个五维数组的声明和访问：</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">myArray[<span class="number">0</span>]=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">myArray[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">myArray[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">myArray[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">	myArray[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=“This is getting out <span class="keyword">of</span> hand”</div><div class="line">Document.write(myArray[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><ul>
<li><p>sort()方法是按照字符编码的顺序进行排序</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> a - b</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>)</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"10"</span></div><div class="line">arr[<span class="number">1</span>] = <span class="string">"5"</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"40"</span></div><div class="line">arr[<span class="number">3</span>] = <span class="string">"25"</span></div><div class="line">arr[<span class="number">4</span>] = <span class="string">"1000"</span></div><div class="line">arr[<span class="number">5</span>] = <span class="string">"1"</span></div><div class="line"><span class="built_in">document</span>.write(arr + <span class="string">"&lt;br /&gt;"</span>)</div><div class="line"><span class="built_in">document</span>.write(arr.sort(sortNumber))</div></pre></td></tr></table></figure>
<blockquote>
<p>输出10,5,40,25,1000,1<br>  1,5,10,25,40,1000</p>
</blockquote>
</li>
<li><p>冒泡排序</p>
</li>
</ul>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//冒泡排序法一:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">elements</span>)</span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;elements.length<span class="number">-1</span>;i++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;elements.length-i<span class="number">-1</span>;j++)&#123;</div><div class="line"><span class="keyword">if</span>(elements[j]&gt;elements[j+<span class="number">1</span>])&#123;</div><div class="line"><span class="keyword">var</span> swap=elements[j];</div><div class="line">elements[j]=elements[j+<span class="number">1</span>];</div><div class="line">elements[j+<span class="number">1</span>]=swap;</div><div class="line">&#125; &#125;</div><div class="line">&#125;&#125;</div><div class="line"><span class="keyword">var</span> elements = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'before: '</span> +</div><div class="line">elements+<span class="string">"&lt;br/&gt;"</span>);</div><div class="line">sort(elements);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">' after: '</span> + elements);</div></pre></td></tr></table></figure>

&gt; 输出：before: 3,1,5,7,2,10,8,9,4,  
    after: 1,2,3,4,5,6,7,8,9,10

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> i = arr.length, j;</div><div class="line"><span class="keyword">var</span> tempExchangVal;</div><div class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</div><div class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">tempExchangVal = arr[j];      </div><div class="line">arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">arr[j + <span class="number">1</span>] = tempExchangVal;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">i--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h1 id="城市二级联动"><a href="#城市二级联动" class="headerlink" title="城市二级联动:"></a>城市二级联动:</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></div><div class="line">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">id</span>=<span class="string">"gametype"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"aa"</span>&gt;</span>游戏分类<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">id</span>=<span class="string">"gamelist"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>游戏名称<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">     <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">var</span> game = <span class="keyword">new</span> <span class="built_in">Array</span>( );</div><div class="line"></div><div class="line">         game[<span class="string">'纸牌游戏'</span>]=[<span class="string">'斗地主'</span>, <span class="string">'拖拉机'</span>, <span class="string">'桥牌'</span>, <span class="string">'拱猪'</span>, <span class="string">'打百分'</span>];</div><div class="line">         game[<span class="string">'棋类游戏'</span>]=[<span class="string">'军棋'</span>, <span class="string">'跳棋'</span>, <span class="string">'五子棋'</span>, <span class="string">'围棋'</span>, <span class="string">'中国象棋'</span>, <span class="string">'国际象棋'</span>, <span class="string">'飞行棋'</span>, <span class="string">'黑白棋'</span>];</div><div class="line">         game[<span class="string">'其他游戏'</span>] = [<span class="string">'连连看'</span>, <span class="string">'俄罗斯方块'</span>, <span class="string">'麻将'</span>, <span class="string">'台球'</span>, <span class="string">'挑错'</span>];</div><div class="line"></div><div class="line"></div><div class="line">         <span class="comment">//</span></div><div class="line">         <span class="keyword">var</span> gametype=<span class="built_in">document</span>.getElementById(<span class="string">"gametype"</span>)</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">in</span> game)&#123;</div><div class="line"></div><div class="line">             gametype.add(<span class="keyword">new</span> Option(x,x))</div><div class="line">         &#125;</div><div class="line">        gametype.onchange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">             <span class="keyword">var</span>  gamelist=<span class="built_in">document</span>.getElementById(<span class="string">"gamelist"</span>)</div><div class="line">             gamelist.options.length=<span class="number">0</span>;</div><div class="line">             <span class="keyword">var</span>  gametypevalue=gametype.value;</div><div class="line"></div><div class="line">             <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> game)&#123;</div><div class="line">              <span class="keyword">if</span>(j==gametypevalue)&#123;</div><div class="line"></div><div class="line">                  <span class="keyword">for</span>(<span class="keyword">var</span> f=<span class="number">0</span>;f&lt;game[j].length;f++)&#123;</div><div class="line">                      <span class="built_in">console</span>.log(game[j]);</div><div class="line">                      <span class="built_in">console</span>.log(game[j][f]);</div><div class="line">                      gamelist.add(<span class="keyword">new</span> Option(game[j][f],game[j][f]))</div><div class="line">                  &#125;</div><div class="line"></div><div class="line"></div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">         &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端基础" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="动态网页编程" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
